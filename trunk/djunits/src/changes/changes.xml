<document xmlns="http://maven.apache.org/changes/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/changes/1.0.0 http://maven.apache.org/xsd/changes-1.0.0.xsd">
  <body>

    <release version="3.01.03" date="2019-04021" description="DirectionUnit human readable improved">
      <action dev="averbraeck" type="update">
        The human readable form of the DirectionUnit has been improved. The old form was e.g. East(deg)
        which is not logical, as the unit is degree, w.r.t. the East. Therefore, the units have been 
        changed to:
<![CDATA[
<pre>
DirectionUnit.rad(North) = rad(N) | rad(North)
DirectionUnit.rad(East) = rad | rad(East) | rad(E)| radian
DirectionUnit.deg(North) = deg(N) | deg(North) | \U00B0(N)
DirectionUnit.deg(East) = deg | deg(East) | deg(E) | degree | \U00B0 | \U00B0(E)
</pre>
]]>
      </action>
      <action dev="averbraeck" type="update">
        The GenerateXSD program in the djunits-generator project now also generates unit dependent 
        XML that can only have positive values or zero. 
      </action>
      <action dev="averbraeck" type="update">
        The GenerateXSD program in the djunits-generator project now also generates the possibility
        to use the E-notation, e.g. "1.0E+6 meter". 
      </action>
    </release>
    
    <release version="3.01.02" date="2019-04-01" description="DirectionUnit repaired; serializable">
      <action dev="averbraeck" type="fix">
        The DirectionUnit gave wrong results for Northing versus Easting. Easting has now been taken as
        the BASE direction whereas Northing shows a shift of 90 degrees. All units are counter-clockwise.
        A DirectionTest and DirectionUnitTest have been added to check the correctness.  
      </action>
      <action dev="averbraeck" type="fix">
        Several classes were not serializable. A unit test now checks all (outer) classes that are
        not interfaces, abstract classes, or classes with a private constructor (utility classes)
        for the implementation of the Serializable interface. Classes that were not serializable
        have been adapted.
      </action>
    </release>
    
    <release version="3.01.01" date="2019-03-16" description="stringOf methods have space between number and unit">
      <action dev="averbraeck" type="fix">
        The Scalar.stringOf methods now have a space between the number and the unit, so "2.3 rad" 
        instead of "2.3rad".
      </action>
    </release>
    
    <release version="3.01.00" date="2019-03-02" description="Unit constructor and localizations changed">
      <action dev="averbraeck" type="fix">
        The surefire test plugin in the pom file has forkMode set to 'always' to ensure every unit test 
        is run as a separate process to avoid static leaks between tests. If not, the created '7abbr' 
        units will leak from one test to the other.
      </action>
      <action dev="averbraeck" type="fix">
        The use of localizations has been fixed, and unit tests to check the localization have been 
        included.
      </action>
      <action dev="averbraeck" type="add">
        In the djunits-generator project, the class GenerateXSD generates a file called 'djunits.xsd' with 
        all units in /generated-code/resources, which can be used for text-based XML parsing of units.
      </action>
      <action dev="averbraeck" type="update">
        Website information has incorporated the Unit constructor changes.
      </action>
      <action dev="averbraeck" type="add">
        The properties file for the localizations file has changed. The abbreviation key now finds both
        the abbreviation and the name for a localized unit. In addition, zero or more text-only 
        representations of the unit can be added in the properties file. An example: rather than having
        a mu-sign in the textual representations for a micrometer, a "mum" text-only version is added.
        Another example: the textual representation for a week can be "wk" or "week". This is 
        especially useful in the parsing of human input or XML/JSON files.
      </action>
      <action dev="averbraeck" type="add">
        In order to guarantee one textual representation of a unit that is not localized in 
        e.g., an XML or JSON file, extra methods have been added to the Unit class to get the 
        abbreviation, name, and textual representations in the default locale (currently 'en').  
      </action>
      <action dev="averbraeck" type="remove">
        Since the nameKey is not used anymore to get the localized names from the properties files,
        the nameKey has been removed from all unit implementations. Of course it is still possible
        to initialize a Unit with a user-defined name. In order to make the construction easier,
        different constructors for user-defined and standard units are included; one with a name
        and an abbreviation, the other just with an abbreviationKey. The boolean to indicate whether 
        the unit is a standard unit disappeared as a result. This influences the construction of
        all units!
      </action>
    </release>
    
    <release version="3.00.09" date="2019-02-27" description="valueOf and stringOf">
      <action dev="averbraeck" type="add">
        Scalar has been provided with a stringOf(Scalar) method, and all absolute and relative 
        scalars have been provided with a valueOf(String) method.
      </action>
      <action dev="averbraeck" type="add">
        The generators have been adapted to create the valueOf(...) code for all absolute and 
        relative scalar classes, both Double and Float.
      </action>
      <action dev="averbraeck" type="add">
        A small demo for valueOf and stringOf has called Parsing has been added to djunits-demo.
      </action>
    </release>

    <release version="3.00.08" date="2019-01-17" description="javadoc">
      <action dev="averbraeck" type="add">
        The ParamComments utility class has been added to the djunits-generator project. 
        It adds or updates the type for each parameter in the javadoc of all java files in 
        /src/main/java in all or in selected projects in the workspace.
      </action>
      <action dev="averbraeck" type="update">
        Copyright message changed to 2019.
      </action>
    </release>
 
    <release version="3.00.07" date="2018-08-11" description="setDisplayUnit method added to all value types">
      <action dev="averbraeck" type="add">
        All scalars, vectors and matrices now have a setDisplayUnit method. The unit is just for display purposes;
        it used to be final, although the value is stored in the SI or standard unit. When a value was instantiated
        using an SI value, but the display unit had to be different, methods like: 
<![CDATA[
<pre>
   FloatDensity fd = new FloatDensity(FloatDensity.createSI(si).getInUnit(unit), unit);
</pre>
]]>
        had to be used. Now this can easily been done as follows:
<![CDATA[
<pre>
   FloatDensity fd =(FloatDensity.createSI(si);
   fd.setDisplayUnit(unit);
</pre>
]]>
      </action>
      <action dev="averbraeck" type="add">
        For Scalar, FloatScalar, Vector, FloatVector, Matrix, and FloatMatrix, a generic instantiate method
        is added to a utility class (e.g., DoubleScalarUtil), which instantiates values based on the unit
        type it is provided with. So you can use:
<![CDATA[
<pre>
  Acceleration = DoubleScalarUtil.instantiate(12960.0, AccelerationUnit.KM_PER_HOUR_2);
</pre>
]]>
        but also with a more 'anonymous' unit:
<![CDATA[
<pre>
  Unit<?> unitUSDm2 = new MoneyPerAreaUnit(MoneyUnit.USD, AreaUnit.SQUARE_METER, "USD/m2", "$/m2");
  MoneyPerArea moneyPerArea = DoubleScalarUtil.instantiateAnonymous(10.0, unitUSDm2);
</pre>
]]>
        This can be especially useful in data driven simulations where various types of data can be sent
        through messages, and where the message contains the unit as well.
      </action>
    </release>

    <release version="3.00.06" date="2018-08-10" description="hashCode and equals for MoneyUnit changed">
      <action dev="averbraeck" type="update">
        hashCode and equal for the MoneyUnit added. equalsIgnoreNaming(...) works on the basis of
        the numeric code of the currency.
      </action>
    </release>

    <release version="3.00.05" date="2018-08-10" description="hashCodes for Units changed">
      <action dev="averbraeck" type="update">
        hashCode and equal for the units worked only on the basis of abbreviations
        and names.
        For LinearUnit and AbsoluteLinearUnit, the scale has been added to hashCode and equals.
      </action>
      <action dev="averbraeck" type="add">
        for equals() a unit with Dutch names is different from the same unit with
        English names. Now, the units
        that have the same 'scale factor' and/or offset, have the same
        equalsIgnoreNaming().
        This means, for instance, that although a METRIC_TON and a MEGAGRAM are different MassUnits,
        equalsIgnoreNaming() will now state that they are the same, as each represents 1000 kg.
        This also means that hand-made units that correspond numerically to an existing unit,
        will be considered equal according to equalsIgnoreNaming (but not to the equals method).
      </action>
    </release>

    <release version="3.00.04" date="2018-08-09" description="get(r,c) added to Matrix interface">
      <action dev="averbraeck" type="add">
        Matrix and FloatMatrix interface now have the get(r, c) function that was
        already implemented.
      </action>
    </release>

    <release version="3.00.03" date="2018-01-28" description="toArray() function added to Vector and FloatVector">
      <action dev="averbraeck" type="add">
        Typed Scalar[] toArray() function added for all vectors.
      </action>
      <action dev="averbraeck" type="add">
        VectorToArrayExample added to djunits-demo.
      </action>
    </release>

    <release version="3.00.02" date="2018-01-28" description="Iterator added to Vector and FloatVector">
      <action dev="averbraeck" type="add">
        Iterator added to Vector and FloatVector, so statements like "for (Speed s :
        speedVector)" are possible.
      </action>
      <action dev="averbraeck" type="fix">
        Bug for instantiateMD() and instantiate() on the basis of a sparse Map in FloatVector solved:
      <![CDATA[
<pre>
  IntStream.range(0, values.size()).parallel().forEach(index -> valuesSI[index] 
    = values.get(indices[index]).getSI());
instead of
  values.keySet().parallelStream().forEach(index -> valuesSI[index] 
    = values.get(index).getSI());
</pre>
]]>
      </action>
      <action dev="averbraeck" type="add">
        VectorIteratorExample added to djunits-demo.
      </action>
      <action dev="averbraeck" type="update">
        Copyright statement extended to 2018.
      </action>
    </release>

    <release version="3.00.01" date="2017-04-29" description="Several absolute base units added">
      <action dev="averbraeck" type="add">
        For DirectionUnit, EAST_RADIAN and EAST_DEGREE have been added.
      </action>
      <action dev="averbraeck" type="add">
        For TimeUnit, several BASE units with e.g., SECOND, MINUTE, HOUR, DAY, WEEK
        have been added.
      </action>
      <action dev="averbraeck" type="update">
        In the TimeUnit, Time, and FloatTime classes a warning has been placed that
        indicates that precision is limited.
        For floatTime it states: Note that when the offset of a stored absolute Time
        becomes large, precision of a float
        might not be enough for the required resolution of a Time. A float has around
        7 significant digits (23 bit mantissa).
        This means that when we need to have a float time that is precise to
        microseconds, the Time value should not go
        above 2^22 = 4.0E6. This is not enough to store Epoch values that are
        in the order of magnitude of 2E12 ms!
        So feeding System.TimeInMillis() to a FloatTime with TimeUnit.BASE as its
        unit is not having the required precision.
        At best, a FloatTime can store TimeUnit.BASE or TimeUnit.EPOCH values
        with real calendar values with a precision
        of
        several minutes.
      </action>
      <action dev="averbraeck" type="add">
        The GenerateUNITs has a replacement option that can insert the above
        precision warnings in the automatically generated
        Time and FloatTime (and other) classes.
      </action>
    </release>

    <release version="3.00.00" date="2017-04-27" description="Absolute units separate from relative units">
      <action dev="averbraeck" type="add">
        Abolute units and relative units have been separated. They are truly
        different. In DJUNITS version 2, absolute and separate variables use the same unit.
        E.g., a Time and a Duration
        both use a TimeUnit. In classes that have to enforce that
        all components are of unit TimeUnit, Duration as well
        as Time can be used. This is not desirable.
        Therefore we need to split the TimeUnit, AngleUnit, LengthUnit and
        TemperatureUnit
        into an absolute and a relative version.
      </action>
      <action dev="averbraeck" type="update">
        UNITS.java has been made consistent with the absolute/relative unit changes.
      </action>
      <action dev="averbraeck" type="update">
        Unit tests have been made consistent with the absolute/relative unit changes.
      </action>
      <action dev="averbraeck" type="update">
        Documentation has been made consistent with the absolute/relative unit
        changes.
      </action>
      <action dev="averbraeck" type="update">
        OffsetLinearScale now extends LinearScale.
      </action>
      <action dev="averbraeck" type="update">
        MoneyPerTimeUnit renamed to MoneyPerDurationUnit; same for all other types
        refering to MoneyPerTime.
      </action>
      <action dev="averbraeck" type="update">
        Removed the methods to multiply and divide absolute values with absolute
        values. How can I multiply a position on this planet with another position on the planet?
        Or a time with another
        time? Just doesn't make sense, so removed the methods and the
        corresponding tests.
      </action>
      <action dev="averbraeck" type="update">
        the toAbs() and toRel() methods are removed. I don't understand how to
        translate 1-4-2017 at 12:00 to a relative value.
        The only thing that makes sense is to subtract a value (some
        kind of offset) from the absolute value to get a relative value.
      </action>
    </release>

    <release version="2.02.00" date="2017-04-17" description="Units added to create consistency">
      <action dev="averbraeck" type="add">
        For many Unit classes, standard units have been added to make the unit list
        more internally consistent.
      </action>
      <action dev="averbraeck" type="update">
        UNITS.java has been made consistent with the added units.
      </action>
      <action dev="averbraeck" type="add">
        The UNITS.java content can be generate with the GenerateStaticUNITS program
        in djunits-generator.
      </action>
    </release>

    <release version="2.01.03" date="2017-01-30" description="createSI() method added to scalars; scalar constants added">
      <action dev="averbraeck" type="update">
        Scalars with the exception of Money scalars can now be created with e.g.,
        Length len = Length.createSI(5.0). OTS-297.
      </action>
      <action dev="averbraeck" type="update">
        Constants NaN, POSITIVI_INFINITY, NEGATIVE_INFINITY, POS_MAXVALUE and
        NEG_MAXVALUE have been added to scalars,
        with the exception of Money scalars. OTS-298.
      </action>
    </release>

    <release version="2.01.02" date="2017-01-24" description="Small changes to AbstractDoubleScalar and AbstractFloatScalar">
      <action dev="averbraeck" type="update">
        hashCode of Units are cached, as these are calculated in every compare of
        scalars. OTS-289.
      </action>
      <action dev="averbraeck" type="update">
        AbstractDoubleScalar.compareTo and AbstractFloatScalar.compareTo should use
        static compare method. OTS-290.
      </action>
      <action dev="averbraeck" type="add">
        Add eq0, ne0, gt0, lt0, ge0, and le0 methods to DoubleScalars and
        FloatScalars. OTS-293.
      </action>
    </release>

    <release version="2.01.01" date="2016-11-14" description="neg() function added; cleaned up code">
      <action dev="averbraeck" type="add">
        A neg() function has been added to the Scalar, MutableVector and
        MutableMatrix classes.
        The neg functions changes the value(s) to minus the value(s). OTS-216.
      </action>
      <action dev="averbraeck" type="update">
        Code has been cleaned for @Override and open warnings for formatting of
        comments.
      </action>
    </release>

    <release version="2.01.00" date="2016-11-01" description="Increased speed of instantiation">
      <action dev="averbraeck" type="update">
        Several changes have been made to increase the speed of instantiation of
        scalars. Especially
        the need to use espessAsUnit(...) when the unit is the SI-unit has been decreased. This
        leads
        to a major speed improvement of the use of scalars.
      </action>
      <action dev="averbraeck" type="update">
        A start has been made to increase the speed of instantiation of vectors.
        Further speed
        improvements will be made in the next version.
      </action>
      <action dev="averbraeck" type="add">
        The Unit has a new method 'boolean isBaseSIUnit()' to help determine the need
        for conversion
        of a value into a standard (usually SI) unit.
      </action>
      <action dev="averbraeck" type="add">
        The Scale has a new method 'boolean isBaseSIScale()' to help determine the
        need for conversion
        of a value into a standard (usually SI) unit.
      </action>
    </release>

    <release version="2.00.00" date="2016-10-16" description="Major upgrade of type hierarchy">
      <action dev="averbraeck" type="update">
        A major upgrade has been made to the type hierarchy. Instead of the TypedXXX
        template functions,
        abstract classes and interfaces have been introduced that are more natural to implement and
        have
        faster execution than the typed templates.
      </action>
      <action dev="averbraeck" type="update">
        The DoubleScalar, DoubleVector, DoubleMatrix classes are not at the root of
        the typed classes
        anymore. Rather, they are an implementation of the Abstract classes, next to the typed classes
        in the type hierarchy. So a Length does not extend a DoubleScalar.Rel&lt;LengthUnit&gt; anymore.
        Rather, Length
        and DoubleScalar.Rel&lt;LengthUnit&gt; both extend AbstractDoubleScalarRel.
        Same for the Float classes.
      </action>
    </release>

    <release version="1.03.01" date="2016-05-28" description="Min and max functions added for scalars">
      <action dev="averbraeck" type="add">
        min and max functions have been added for scalars, for combinations of abs,
        rel, dimensionless, money, and float.
      </action>
      <action dev="averbraeck" type="update">
        Copyright notice has been extended to 2016.
      </action>
    </release>

    <release version="1.03.00" date="2016-04-23" description="Abs and Rel for detailed versions removed">
      <action dev="averbraeck" type="update">
        The following changes have been made:
        Time.Abs, Time.Rel --) Time, Duration
        (TimeUnit)
        Length.Abs, Length.Rel --) Position, Length (LengthUnit)
        Temperature.Abs, Temperature.Rel --)
        AbsoluteTemperature, Temperature (TemperatureUnit)
        Angle.Abs, Angle.Rel --) Direction, Angle (AngleUnit)
      </action>
    </release>

    <release version="1.02.06" date="2015-12-23" description="Dependency on reflections package removed">
      <action dev="averbraeck" type="update">
        DJUNITS is no longer dependent on 'reflections'. Instead, the 'Unit' class
        now defines an array of standard units that exist in the package. This list is also used in the unit tests (it
        is public static final).
      </action>
    </release>

    <release version="1.02.05" date="2015-12-22" description="ZERO constants for scalars">
      <action dev="averbraeck" type="add">
        Added ZERO constants for double and float scalars, with the exception of
        Money scalars.
      </action>
    </release>

  </body>
</document>