package org.djunits.value.vfloat.matrix;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.djunits.unit.LengthUnit;
import org.djunits.unit.TemperatureUnit;
import org.djunits.unit.Unit;
import org.djunits.value.StorageType;
import org.djunits.value.ValueException;
import org.djunits.value.vfloat.scalar.FloatScalar;
import org.junit.Test;

/**
 * Test the FloatMatrix class.
 * <p>
 * This file was generated by the djunits value test classes generator, 26 jun, 2015
 * <p>
 * Copyright (c) 2015 Delft University of Technology, PO Box 5, 2600 AA, Delft, the Netherlands. All rights reserved. <br>
 * BSD-style license. See <a href="http://djunits.org/docs/license.html">DJUNITS License</a>.
 * <p>
 * $LastChangedDate$, @version $Revision$, by $Author$,
 * initial version 26 jun, 2015 <br>
 * @author <a href="http://www.tbm.tudelft.nl/averbraeck">Alexander Verbraeck</a>
 * @author <a href="http://www.tudelft.nl/pknoppers">Peter Knoppers</a>
 */
public class FloatMatrixSparseTest
{
    /**
     * Generate test data.
     * @param rows int; the number of rows in the result
     * @param columns int; the number of columns in the result
     * @param nonRectangular boolean; if true; return a non-rectangular array; if false; return a rectangular array
     * @param startValue float; seed value
     * @return float[][]
     */
    private static float[][] data(final int rows, final int columns, final boolean nonRectangular,
        final float startValue)
    {
        float[][] result = new float[rows][];
        final int badRowIndex = nonRectangular ? rows - 1 : -1;
        for (int row = 0; row < rows; row++)
        {
            result[row] = new float[row == badRowIndex ? columns + 1 : columns];
            for (int column = 0; column < result[row].length; column++)
            {
                result[row][column] = row * 1000 + column + startValue;
            }
        }
        return result;
    }

    /**
     * Check that the values in a FloatMatrixmatch the expected values.
     * @param dm FloatMatrix&lt;?&gt;; the FloatMatrix to match
     * @param reference float[][]; the reference values
     * @param precision float; the maximum allowed error
     * @param u Unit&lt;?&gt;; the expected type
     * @param expectAbsolute boolean; if true; dm should be Absolute; if false; dm should be Relative
     */
    private static void checkContentsAndType(final FloatMatrix<?> dm, final float[][] reference,
        final double precision, final Unit<?> u, final boolean expectAbsolute)
    {
        assertTrue("FloatMatrix should not be null", null != dm);
        for (int row = dm.rows(); --row >= 0;)
        {
            for (int column = dm.columns(); --column >= 0;)
            {
                try
                {
                    assertEquals("Value should match", reference[row][column], dm.getInUnit(row, column), precision);
                }
                catch (ValueException exception)
                {
                    fail("Unexpected exception");
                }
            }
        }
        assertEquals("Unit should be " + u.toString(), u, dm.getUnit());
        assertTrue("Should be " + (expectAbsolute ? "Absolute" : "Relative"), expectAbsolute ? dm.isAbsolute() : dm
            .isRelative());
    }

    /**
     * Test that the toString method returns something sensible.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void toStringAbsTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.KELVIN;
            float[][] value = data(3, 5, false, 38.0f);
            FloatMatrix.Abs<TemperatureUnit> dm =
                new FloatMatrix.Abs<TemperatureUnit>(value, tempUnit, StorageType.SPARSE);
            String result = dm.toString(true, true);
            assertTrue("toString result contains \" Abs \"", result.contains(" Abs "));
            assertTrue("toString result contains \"K\"", result.contains("K"));
            assertTrue("toString result starts with \"Immutable \"", result.startsWith("Immutable"));
            assertTrue("toString contains \"Sparse\"", result.contains("Sparse"));
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test that the toString method returns something sensible.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void toStringMutableAbsTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.KELVIN;
            float[][] value = data(3, 5, false, 38.0f);
            MutableFloatMatrix.Abs<TemperatureUnit> dm =
                new MutableFloatMatrix.Abs<TemperatureUnit>(value, tempUnit, StorageType.SPARSE);
            String result = dm.toString(true, true);
            assertTrue("toString result contains \" Abs \"", result.contains(" Abs "));
            assertTrue("toString result contains \"K\"", result.contains("K"));
            assertTrue("toString result starts with \"Immutable \"", result.startsWith("Mutable"));
            assertTrue("toString contains \"Sparse\"", result.contains("Sparse"));
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test constructor, verify the various fields in the constructed objects, test conversions to related units.
     */
    @SuppressWarnings({"static-method", "unchecked"})
    @Test
    public final void basicsAbsTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.DEGREE_CELSIUS;
            float[][] value = data(3, 5, false, 38.0f);
            FloatMatrix.Abs<TemperatureUnit> temperatureDM =
                new FloatMatrix.Abs<TemperatureUnit>(value, tempUnit, StorageType.SPARSE);
            checkContentsAndType(temperatureDM, value, 0.001, tempUnit, true);
            assertEquals("Value in SI is equivalent in Kelvin", 311.15, temperatureDM.getSI(0, 0), 0.05);
            assertEquals("Value in Fahrenheit", 100.4,
                temperatureDM.getInUnit(0, 0, TemperatureUnit.DEGREE_FAHRENHEIT), 0.1);
            float[][] out = temperatureDM.getValuesInUnit();
            for (int row = 0; row < value.length; row++)
            {
                for (int column = 0; column < value[row].length; column++)
                {
                    assertEquals("Value should match", value[row][column], out[row][column], 0.001);
                }
            }
            MutableFloatMatrix.Abs<TemperatureUnit> mdm =
                new MutableFloatMatrix.Abs<TemperatureUnit>(value, tempUnit, StorageType.SPARSE);
            checkContentsAndType(mdm, value, 0.001, tempUnit, true);
            mdm.setSI(0, 0, 73);
            float safe = value[0][0];
            value[0][0] = -200; // Approximate Celsius equivalent of 73 Kelvin
            checkContentsAndType(mdm, value, 1, tempUnit, true);
            value[0][0] = safe; // Restore
            mdm.set(0, 0, temperatureDM.get(0, 0));
            checkContentsAndType(mdm, value, 0.001, tempUnit, true);
            FloatMatrix.Abs<TemperatureUnit> temperature2DM =
                new FloatMatrix.Abs<TemperatureUnit>(temperatureDM.getValuesSI(), TemperatureUnit.KELVIN,
                    StorageType.SPARSE);
            assertTrue("temperature2DM should be equal to temperatureDM", temperature2DM.equals(temperatureDM));
            assertTrue("Value is Absolute", temperatureDM.isAbsolute());
            assertFalse("Value is not Relative", temperatureDM.isRelative());
            temperatureDM = new FloatMatrix.Abs<TemperatureUnit>(value, TemperatureUnit.KELVIN, StorageType.SPARSE);
            checkContentsAndType(temperatureDM, value, 0.001, TemperatureUnit.KELVIN, true);
            out = temperatureDM.getValuesSI();
            for (int row = 0; row < value.length; row++)
            {
                for (int column = 0; column < value[row].length; column++)
                {
                    assertEquals("Value should match", value[row][column], out[row][column], 0.001);
                }
            }
            FloatScalar.Abs<TemperatureUnit>[][] scalar = new FloatScalar.Abs[value.length][];
            for (int row = 0; row < value.length; row++)
            {
                scalar[row] = new FloatScalar.Abs[value[row].length];
                for (int column = 0; column < value[row].length; column++)
                {
                    scalar[row][column] =
                        new FloatScalar.Abs<TemperatureUnit>(value[row][column], TemperatureUnit.DEGREE_CELSIUS);
                }
            }
            temperatureDM = new FloatMatrix.Abs<TemperatureUnit>(scalar, StorageType.SPARSE);
            checkContentsAndType(temperatureDM, value, 0.001, tempUnit, true);
            assertEquals("All cells != 0; cardinality should equal number of cells", value.length * value[0].length,
                temperatureDM.cardinality());
            float sum = 0;
            for (int row = 0; row < value.length; row++)
            {
                scalar[row] = new FloatScalar.Abs[value[row].length];
                for (int column = 0; column < value[row].length; column++)
                {
                    sum += temperatureDM.getSI(row, column);
                }
            }
            assertEquals("zSum should be sum of all values", sum, temperatureDM.zSum(), 0.001);
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test conversion to mutable equivalent and back.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void toMutableAndBackAbsTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.DEGREE_CELSIUS;
            float[][] value = data(3, 5, false, 38.0f);
            float[][] value2 = data(3, 5, false, 38.0f);
            value2[0][0] = 12345;
            FloatMatrix.Abs<TemperatureUnit> dm =
                new FloatMatrix.Abs<TemperatureUnit>(value, tempUnit, StorageType.SPARSE);
            FloatMatrix.Abs<TemperatureUnit> dmCopy = dm;
            MutableFloatMatrix.Abs<TemperatureUnit> mdm = dm.mutable();
            checkContentsAndType(dm, value, 0.001, tempUnit, true);
            checkContentsAndType(mdm, value, 0.001, tempUnit, true);
            checkContentsAndType(dmCopy, value, 0.001, tempUnit, true);
            MutableFloatMatrix.Abs<TemperatureUnit> mdmCopy = mdm.copy();
            checkContentsAndType(mdmCopy, value, 0.001, tempUnit, true);
            MutableFloatMatrix.Abs<TemperatureUnit> mmdm = mdm.mutable();
            checkContentsAndType(mmdm, value, 0.001, tempUnit, true);
            assertEquals("hashCode is independent on mutability", dm.hashCode(), mdm.hashCode());
            // Modify mdm
            mdm.setInUnit(0, 0, 12345, TemperatureUnit.DEGREE_CELSIUS);
            checkContentsAndType(dm, value, 0.001, tempUnit, true);
            checkContentsAndType(mdm, value2, 0.01, tempUnit, true);
            checkContentsAndType(mdmCopy, value, 0.001, tempUnit, true);
            checkContentsAndType(mmdm, value, 0.001, tempUnit, true);
            FloatMatrix.Abs<TemperatureUnit> idm = mdm.immutable();
            assertTrue("Different value extremely likely results in different hashCode", dm.hashCode() != mdm
                .hashCode());
            // Restore value of mdm
            mdm.setSI(0, 0, dm.getSI(0, 0));
            checkContentsAndType(idm, value2, 0.01, tempUnit, true);
            checkContentsAndType(mdm, value, 0.001, tempUnit, true);
            checkContentsAndType(mmdm, value, 0.001, tempUnit, true);
            mmdm.setSI(0, 0, 0);
            checkContentsAndType(mdm, value, 0.001, tempUnit, true);
            assertEquals("value should be about -273", -273, mmdm.getInUnit(0, 0, tempUnit), 0.2);
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test the equals method.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void equalsAbsTest()
    {
        LengthUnit lengthUnit = LengthUnit.METER;
        float value = 38.0f;
        FloatScalar.Abs<LengthUnit> dm = new FloatScalar.Abs<LengthUnit>(value, lengthUnit);
        assertTrue("Equal to itself", dm.equals(dm));
        assertFalse("Not equal to null", dm.equals(null));
        assertFalse("Not equal to some other kind of object; e.g. a String", dm.equals(new String("abc")));
        FloatScalar.Rel<LengthUnit> dmCounterPart = new FloatScalar.Rel<LengthUnit>(value, lengthUnit);
        assertFalse("Not equal if one Absolute and other Relative", dm.equals(dmCounterPart));
        FloatScalar.Abs<TemperatureUnit> dmWrongBaseUnit =
            new FloatScalar.Abs<TemperatureUnit>(value, TemperatureUnit.KELVIN);
        assertEquals("The underlying SI values are the same", dm.getSI(), dmWrongBaseUnit.getSI(), 0.0001);
        assertFalse("Not equals because the standard SI unit differs", dm.equals(dmWrongBaseUnit));
        FloatScalar.Abs<LengthUnit> dmCompatibleUnit = new FloatScalar.Abs<LengthUnit>(38000.0f, LengthUnit.MILLIMETER);
        assertFalse("Units are different", dm.getUnit().equals(dmCompatibleUnit.getUnit()));
        assertTrue("equals returns true", dm.equals(dmCompatibleUnit));
        FloatScalar.Abs<LengthUnit> dmDifferentValue = new FloatScalar.Abs<LengthUnit>(123.456f, LengthUnit.MILLIMETER);
        assertFalse("Different value makes equals return false", dm.equals(dmDifferentValue));
    }

    /**
     * Test the Math functions.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void mathFunctionsTestAbsTest()
    {
        float[] seedValues = {-10f, -2f, -1f, -0.5f, -0.1f, 0f, 0.1f, 0.5f, 1f, 2f, 10f};
        for (float seedValue : seedValues)
        {
            float[][] input = data(3, 5, false, seedValue);
            MutableFloatMatrix.Abs<LengthUnit> dm;
            try
            {
                dm = new MutableFloatMatrix.Abs<LengthUnit>(input, LengthUnit.METER, StorageType.SPARSE);
                dm.ceil();
                MathTester.tester(input, "ceil", dm, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float d)
                    {
                        return (float) Math.ceil(d);
                    }
                });
                dm = new MutableFloatMatrix.Abs<LengthUnit>(input, LengthUnit.METER, StorageType.SPARSE);
                dm.floor();
                MathTester.tester(input, "floor", dm, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float d)
                    {
                        return (float) Math.floor(d);
                    }
                });
                dm = new MutableFloatMatrix.Abs<LengthUnit>(input, LengthUnit.METER, StorageType.SPARSE);
                dm.rint();
                MathTester.tester(input, "rint", dm, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float d)
                    {
                        return (float) Math.rint(d);
                    }
                });
                dm = new MutableFloatMatrix.Abs<LengthUnit>(input, LengthUnit.METER, StorageType.SPARSE);
                dm.round();
                MathTester.tester(input, "round", dm, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float d)
                    {
                        return Math.round(d);
                    }
                });
            }
            catch (ValueException ve)
            {
                fail("Caught unexpected ValueException: " + ve.toString());
            }
        }
    }

    /**
     * Test plus(FloatMatrixAbs.Sparse, FloatMatrixRel.Dense).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryplusOfAbsSparseAndRelDenseTest()
    {
        try
        {
            float[][] leftValue = data(3, 5, false, 123.4f);
            float[][] rightValue = data(3, 5, false, 234.5f);
            FloatMatrix.Abs<LengthUnit> left =
                new FloatMatrix.Abs<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<LengthUnit> right =
                new FloatMatrix.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
            FloatMatrix.Abs<?> result = FloatMatrix.plus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                for (int j = 0; j < leftValue[i].length; j++)
                {
                    assertEquals("value of element should be SI plus of contributing elements", left.getSI(i, j)
                        + right.getSI(i, j), result.getSI(i, j), 0.001);
                }
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test minus(FloatMatrixAbs.Sparse, FloatMatrixRel.Dense).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryminusOfAbsSparseAndRelDenseTest()
    {
        try
        {
            float[][] leftValue = data(3, 5, false, 123.4f);
            float[][] rightValue = data(3, 5, false, 234.5f);
            FloatMatrix.Abs<LengthUnit> left =
                new FloatMatrix.Abs<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<LengthUnit> right =
                new FloatMatrix.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
            FloatMatrix.Abs<?> result = FloatMatrix.minus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                for (int j = 0; j < leftValue[i].length; j++)
                {
                    assertEquals("value of element should be SI minus of contributing elements", left.getSI(i, j)
                        - right.getSI(i, j), result.getSI(i, j), 0.001);
                }
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test plus(FloatMatrixAbs.Sparse, FloatMatrixRel.Sparse).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryplusOfAbsSparseAndRelSparseTest()
    {
        try
        {
            float[][] leftValue = data(3, 5, false, 123.4f);
            float[][] rightValue = data(3, 5, false, 234.5f);
            FloatMatrix.Abs<LengthUnit> left =
                new FloatMatrix.Abs<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<LengthUnit> right =
                new FloatMatrix.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Abs<?> result = FloatMatrix.plus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                for (int j = 0; j < leftValue[i].length; j++)
                {
                    assertEquals("value of element should be SI plus of contributing elements", left.getSI(i, j)
                        + right.getSI(i, j), result.getSI(i, j), 0.001);
                }
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test minus(FloatMatrixAbs.Sparse, FloatMatrixRel.Sparse).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryminusOfAbsSparseAndRelSparseTest()
    {
        try
        {
            float[][] leftValue = data(3, 5, false, 123.4f);
            float[][] rightValue = data(3, 5, false, 234.5f);
            FloatMatrix.Abs<LengthUnit> left =
                new FloatMatrix.Abs<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<LengthUnit> right =
                new FloatMatrix.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Abs<?> result = FloatMatrix.minus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                for (int j = 0; j < leftValue[i].length; j++)
                {
                    assertEquals("value of element should be SI minus of contributing elements", left.getSI(i, j)
                        - right.getSI(i, j), result.getSI(i, j), 0.001);
                }
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test that malformed or mismatching arrays throw a ValueException.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void sizeCheckAbsTest()
    {
        int junk = 0;
        try
        {
            // null array
            new FloatMatrix.Abs<TemperatureUnit>((float[][]) null, TemperatureUnit.DEGREE_FAHRENHEIT,
                StorageType.SPARSE);
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        try
        {
            // Matrix with null on first row
            float[][] in = data(3, 5, false, 12.3f);
            in[0] = null;
            new FloatMatrix.Abs<TemperatureUnit>(in, TemperatureUnit.DEGREE_CELSIUS, StorageType.SPARSE);
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        try
        {
            // Matrix with null on last row
            float[][] in = data(3, 5, false, 12.3f);
            in[in.length - 1] = null;
            new FloatMatrix.Abs<TemperatureUnit>(in, TemperatureUnit.DEGREE_CELSIUS, StorageType.SPARSE);
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        try
        {
            // Non-rectangular array
            float[][] in = data(3, 5, true, 12.3f);
            new FloatMatrix.Abs<TemperatureUnit>(in, TemperatureUnit.DEGREE_CELSIUS, StorageType.SPARSE);
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        // Determinant of non-square Matrix
        float[][] in = data(3, 5, false, 12.3f);
        try
        {
            FloatMatrix.Abs<TemperatureUnit> matrix = null;
            try
            {
                matrix = new FloatMatrix.Abs<TemperatureUnit>(in, TemperatureUnit.DEGREE_CELSIUS, StorageType.SPARSE);
            }
            catch (ValueException ve)
            {
                fail("Caught unexpected exception: " + ve.toString());
            }
            matrix.determinant();
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        assertTrue("The variable junk is only used to suppress annoying warnings of the code checker", junk > 0);
    }

    /**
     * Test the det method that computes and returns the determinant.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void determinantAbsTest()
    {
        try
        {
            float[][] values = {{1, 2, 3}, {3, 5, 7}, {5, 10, 0}};
            FloatMatrix.Abs<TemperatureUnit> matrix =
                new FloatMatrix.Abs<TemperatureUnit>(values, TemperatureUnit.KELVIN, StorageType.SPARSE);
            assertEquals("Determinant should be 15", 15, matrix.determinant(), 0.001);
        }
        catch (ValueException ve)
        {
            if (ve.toString().contains("Matrix must be sparse"))
            {
                System.err.println("Ignoring bug in COLT library");
                return;
            }
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test that the toString method returns something sensible.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void toStringRelTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.KELVIN;
            float[][] value = data(3, 5, false, 38.0f);
            FloatMatrix.Rel<TemperatureUnit> dm =
                new FloatMatrix.Rel<TemperatureUnit>(value, tempUnit, StorageType.SPARSE);
            String result = dm.toString(true, true);
            assertTrue("toString result contains \" Rel \"", result.contains(" Rel "));
            assertTrue("toString result contains \"K\"", result.contains("K"));
            assertTrue("toString result starts with \"Immutable \"", result.startsWith("Immutable"));
            assertTrue("toString contains \"Sparse\"", result.contains("Sparse"));
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test that the toString method returns something sensible.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void toStringMutableRelTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.KELVIN;
            float[][] value = data(3, 5, false, 38.0f);
            MutableFloatMatrix.Rel<TemperatureUnit> dm =
                new MutableFloatMatrix.Rel<TemperatureUnit>(value, tempUnit, StorageType.SPARSE);
            String result = dm.toString(true, true);
            assertTrue("toString result contains \" Rel \"", result.contains(" Rel "));
            assertTrue("toString result contains \"K\"", result.contains("K"));
            assertTrue("toString result starts with \"Immutable \"", result.startsWith("Mutable"));
            assertTrue("toString contains \"Sparse\"", result.contains("Sparse"));
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test constructor, verify the various fields in the constructed objects, test conversions to related units.
     */
    @SuppressWarnings({"static-method", "unchecked"})
    @Test
    public final void basicsRelTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.DEGREE_CELSIUS;
            float[][] value = data(3, 5, false, 38.0f);
            FloatMatrix.Rel<TemperatureUnit> temperatureDM =
                new FloatMatrix.Rel<TemperatureUnit>(value, tempUnit, StorageType.SPARSE);
            checkContentsAndType(temperatureDM, value, 0.001, tempUnit, false);
            assertEquals("Value in SI is equivalent in Kelvin", 311.15, temperatureDM.getSI(0, 0), 0.05);
            assertEquals("Value in Fahrenheit", 100.4,
                temperatureDM.getInUnit(0, 0, TemperatureUnit.DEGREE_FAHRENHEIT), 0.1);
            float[][] out = temperatureDM.getValuesInUnit();
            for (int row = 0; row < value.length; row++)
            {
                for (int column = 0; column < value[row].length; column++)
                {
                    assertEquals("Value should match", value[row][column], out[row][column], 0.001);
                }
            }
            MutableFloatMatrix.Rel<TemperatureUnit> mdm =
                new MutableFloatMatrix.Rel<TemperatureUnit>(value, tempUnit, StorageType.SPARSE);
            checkContentsAndType(mdm, value, 0.001, tempUnit, false);
            mdm.setSI(0, 0, 73);
            float safe = value[0][0];
            value[0][0] = -200; // Approximate Celsius equivalent of 73 Kelvin
            checkContentsAndType(mdm, value, 1, tempUnit, false);
            value[0][0] = safe; // Restore
            mdm.set(0, 0, temperatureDM.get(0, 0));
            checkContentsAndType(mdm, value, 0.001, tempUnit, false);
            FloatMatrix.Rel<TemperatureUnit> temperature2DM =
                new FloatMatrix.Rel<TemperatureUnit>(temperatureDM.getValuesSI(), TemperatureUnit.KELVIN,
                    StorageType.SPARSE);
            assertTrue("temperature2DM should be equal to temperatureDM", temperature2DM.equals(temperatureDM));
            assertTrue("Value is Relative", temperatureDM.isRelative());
            assertFalse("Value is not Absolute", temperatureDM.isAbsolute());
            temperatureDM = new FloatMatrix.Rel<TemperatureUnit>(value, TemperatureUnit.KELVIN, StorageType.SPARSE);
            checkContentsAndType(temperatureDM, value, 0.001, TemperatureUnit.KELVIN, false);
            out = temperatureDM.getValuesSI();
            for (int row = 0; row < value.length; row++)
            {
                for (int column = 0; column < value[row].length; column++)
                {
                    assertEquals("Value should match", value[row][column], out[row][column], 0.001);
                }
            }
            FloatScalar.Rel<TemperatureUnit>[][] scalar = new FloatScalar.Rel[value.length][];
            for (int row = 0; row < value.length; row++)
            {
                scalar[row] = new FloatScalar.Rel[value[row].length];
                for (int column = 0; column < value[row].length; column++)
                {
                    scalar[row][column] =
                        new FloatScalar.Rel<TemperatureUnit>(value[row][column], TemperatureUnit.DEGREE_CELSIUS);
                }
            }
            temperatureDM = new FloatMatrix.Rel<TemperatureUnit>(scalar, StorageType.SPARSE);
            checkContentsAndType(temperatureDM, value, 0.001, tempUnit, false);
            assertEquals("All cells != 0; cardinality should equal number of cells", value.length * value[0].length,
                temperatureDM.cardinality());
            float sum = 0;
            for (int row = 0; row < value.length; row++)
            {
                scalar[row] = new FloatScalar.Rel[value[row].length];
                for (int column = 0; column < value[row].length; column++)
                {
                    sum += temperatureDM.getSI(row, column);
                }
            }
            assertEquals("zSum should be sum of all values", sum, temperatureDM.zSum(), 0.001);
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test conversion to mutable equivalent and back.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void toMutableAndBackRelTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.DEGREE_CELSIUS;
            float[][] value = data(3, 5, false, 38.0f);
            float[][] value2 = data(3, 5, false, 38.0f);
            value2[0][0] = 12345;
            FloatMatrix.Rel<TemperatureUnit> dm =
                new FloatMatrix.Rel<TemperatureUnit>(value, tempUnit, StorageType.SPARSE);
            FloatMatrix.Rel<TemperatureUnit> dmCopy = dm;
            MutableFloatMatrix.Rel<TemperatureUnit> mdm = dm.mutable();
            checkContentsAndType(dm, value, 0.001, tempUnit, false);
            checkContentsAndType(mdm, value, 0.001, tempUnit, false);
            checkContentsAndType(dmCopy, value, 0.001, tempUnit, false);
            MutableFloatMatrix.Rel<TemperatureUnit> mdmCopy = mdm.copy();
            checkContentsAndType(mdmCopy, value, 0.001, tempUnit, false);
            MutableFloatMatrix.Rel<TemperatureUnit> mmdm = mdm.mutable();
            checkContentsAndType(mmdm, value, 0.001, tempUnit, false);
            assertEquals("hashCode is independent on mutability", dm.hashCode(), mdm.hashCode());
            // Modify mdm
            mdm.setInUnit(0, 0, 12345, TemperatureUnit.DEGREE_CELSIUS);
            checkContentsAndType(dm, value, 0.001, tempUnit, false);
            checkContentsAndType(mdm, value2, 0.01, tempUnit, false);
            checkContentsAndType(mdmCopy, value, 0.001, tempUnit, false);
            checkContentsAndType(mmdm, value, 0.001, tempUnit, false);
            FloatMatrix.Rel<TemperatureUnit> idm = mdm.immutable();
            assertTrue("Different value extremely likely results in different hashCode", dm.hashCode() != mdm
                .hashCode());
            // Restore value of mdm
            mdm.setSI(0, 0, dm.getSI(0, 0));
            checkContentsAndType(idm, value2, 0.01, tempUnit, false);
            checkContentsAndType(mdm, value, 0.001, tempUnit, false);
            checkContentsAndType(mmdm, value, 0.001, tempUnit, false);
            mmdm.setSI(0, 0, 0);
            checkContentsAndType(mdm, value, 0.001, tempUnit, false);
            assertEquals("value should be about -273", -273, mmdm.getInUnit(0, 0, tempUnit), 0.2);
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test the equals method.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void equalsRelTest()
    {
        LengthUnit lengthUnit = LengthUnit.METER;
        float value = 38.0f;
        FloatScalar.Rel<LengthUnit> dm = new FloatScalar.Rel<LengthUnit>(value, lengthUnit);
        assertTrue("Equal to itself", dm.equals(dm));
        assertFalse("Not equal to null", dm.equals(null));
        assertFalse("Not equal to some other kind of object; e.g. a String", dm.equals(new String("abc")));
        FloatScalar.Abs<LengthUnit> dmCounterPart = new FloatScalar.Abs<LengthUnit>(value, lengthUnit);
        assertFalse("Not equal if one Absolute and other Relative", dm.equals(dmCounterPart));
        FloatScalar.Rel<TemperatureUnit> dmWrongBaseUnit =
            new FloatScalar.Rel<TemperatureUnit>(value, TemperatureUnit.KELVIN);
        assertEquals("The underlying SI values are the same", dm.getSI(), dmWrongBaseUnit.getSI(), 0.0001);
        assertFalse("Not equals because the standard SI unit differs", dm.equals(dmWrongBaseUnit));
        FloatScalar.Rel<LengthUnit> dmCompatibleUnit = new FloatScalar.Rel<LengthUnit>(38000.0f, LengthUnit.MILLIMETER);
        assertFalse("Units are different", dm.getUnit().equals(dmCompatibleUnit.getUnit()));
        assertTrue("equals returns true", dm.equals(dmCompatibleUnit));
        FloatScalar.Rel<LengthUnit> dmDifferentValue = new FloatScalar.Rel<LengthUnit>(123.456f, LengthUnit.MILLIMETER);
        assertFalse("Different value makes equals return false", dm.equals(dmDifferentValue));
    }

    /**
     * Test the Math functions.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void mathFunctionsTestRelTest()
    {
        float[] seedValues = {-10f, -2f, -1f, -0.5f, -0.1f, 0f, 0.1f, 0.5f, 1f, 2f, 10f};
        for (float seedValue : seedValues)
        {
            float[][] input = data(3, 5, false, seedValue);
            MutableFloatMatrix.Rel<LengthUnit> dm;
            try
            {
                dm = new MutableFloatMatrix.Rel<LengthUnit>(input, LengthUnit.METER, StorageType.SPARSE);
                dm.abs();
                MathTester.tester(input, "abs", dm, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float d)
                    {
                        return Math.abs(d);
                    }
                });
                dm = new MutableFloatMatrix.Rel<LengthUnit>(input, LengthUnit.METER, StorageType.SPARSE);
                dm.ceil();
                MathTester.tester(input, "ceil", dm, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float d)
                    {
                        return (float) Math.ceil(d);
                    }
                });
                dm = new MutableFloatMatrix.Rel<LengthUnit>(input, LengthUnit.METER, StorageType.SPARSE);
                dm = new MutableFloatMatrix.Rel<LengthUnit>(input, LengthUnit.METER, StorageType.SPARSE);
                dm.floor();
                MathTester.tester(input, "floor", dm, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float d)
                    {
                        return (float) Math.floor(d);
                    }
                });
                dm = new MutableFloatMatrix.Rel<LengthUnit>(input, LengthUnit.METER, StorageType.SPARSE);
                dm.rint();
                MathTester.tester(input, "rint", dm, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float d)
                    {
                        return (float) Math.rint(d);
                    }
                });
                dm = new MutableFloatMatrix.Rel<LengthUnit>(input, LengthUnit.METER, StorageType.SPARSE);
                dm.round();
                MathTester.tester(input, "round", dm, 0.001, new FloatToFloat()
                {
                    @Override
                    public float function(final float d)
                    {
                        return Math.round(d);
                    }
                });
            }
            catch (ValueException ve)
            {
                fail("Caught unexpected ValueException: " + ve.toString());
            }
        }
    }

    /**
     * Test plus(FloatMatrixRel.Sparse, FloatMatrixRel.Dense).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryplusOfRelSparseAndRelDenseTest()
    {
        try
        {
            float[][] leftValue = data(3, 5, false, 123.4f);
            float[][] rightValue = data(3, 5, false, 234.5f);
            FloatMatrix.Rel<LengthUnit> left =
                new FloatMatrix.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<LengthUnit> right =
                new FloatMatrix.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
            FloatMatrix.Rel<?> result = FloatMatrix.plus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                for (int j = 0; j < leftValue[i].length; j++)
                {
                    assertEquals("value of element should be SI plus of contributing elements", left.getSI(i, j)
                        + right.getSI(i, j), result.getSI(i, j), 0.001);
                }
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test minus(FloatMatrixRel.Sparse, FloatMatrixRel.Dense).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryminusOfRelSparseAndRelDenseTest()
    {
        try
        {
            float[][] leftValue = data(3, 5, false, 123.4f);
            float[][] rightValue = data(3, 5, false, 234.5f);
            FloatMatrix.Rel<LengthUnit> left =
                new FloatMatrix.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<LengthUnit> right =
                new FloatMatrix.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
            FloatMatrix.Rel<?> result = FloatMatrix.minus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                for (int j = 0; j < leftValue[i].length; j++)
                {
                    assertEquals("value of element should be SI minus of contributing elements", left.getSI(i, j)
                        - right.getSI(i, j), result.getSI(i, j), 0.001);
                }
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test times(FloatMatrixRel.Sparse, FloatMatrixRel.Dense).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binarytimesOfRelSparseAndRelDenseTest()
    {
        try
        {
            float[][] leftValue = data(3, 5, false, 123.4f);
            float[][] rightValue = data(3, 5, false, 234.5f);
            FloatMatrix.Rel<LengthUnit> left =
                new FloatMatrix.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<LengthUnit> right =
                new FloatMatrix.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
            FloatMatrix.Rel<?> result = FloatMatrix.times(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                for (int j = 0; j < leftValue[i].length; j++)
                {
                    assertEquals("value of element should be SI times of contributing elements", left.getSI(i, j)
                        * right.getSI(i, j), result.getSI(i, j), 0.001);
                }
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test plus(FloatMatrixRel.Sparse, FloatMatrixRel.Sparse).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryplusOfRelSparseAndRelSparseTest()
    {
        try
        {
            float[][] leftValue = data(3, 5, false, 123.4f);
            float[][] rightValue = data(3, 5, false, 234.5f);
            FloatMatrix.Rel<LengthUnit> left =
                new FloatMatrix.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<LengthUnit> right =
                new FloatMatrix.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<?> result = FloatMatrix.plus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                for (int j = 0; j < leftValue[i].length; j++)
                {
                    assertEquals("value of element should be SI plus of contributing elements", left.getSI(i, j)
                        + right.getSI(i, j), result.getSI(i, j), 0.001);
                }
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test minus(FloatMatrixRel.Sparse, FloatMatrixRel.Sparse).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binaryminusOfRelSparseAndRelSparseTest()
    {
        try
        {
            float[][] leftValue = data(3, 5, false, 123.4f);
            float[][] rightValue = data(3, 5, false, 234.5f);
            FloatMatrix.Rel<LengthUnit> left =
                new FloatMatrix.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<LengthUnit> right =
                new FloatMatrix.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<?> result = FloatMatrix.minus(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                for (int j = 0; j < leftValue[i].length; j++)
                {
                    assertEquals("value of element should be SI minus of contributing elements", left.getSI(i, j)
                        - right.getSI(i, j), result.getSI(i, j), 0.001);
                }
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test times(FloatMatrixRel.Sparse, FloatMatrixRel.Sparse).
     */
    @SuppressWarnings("static-method")
    @Test
    public final void binarytimesOfRelSparseAndRelSparseTest()
    {
        try
        {
            float[][] leftValue = data(3, 5, false, 123.4f);
            float[][] rightValue = data(3, 5, false, 234.5f);
            FloatMatrix.Rel<LengthUnit> left =
                new FloatMatrix.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<LengthUnit> right =
                new FloatMatrix.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
            FloatMatrix.Rel<?> result = FloatMatrix.times(left, right);
            for (int i = 0; i < leftValue.length; i++)
            {
                for (int j = 0; j < leftValue[i].length; j++)
                {
                    assertEquals("value of element should be SI times of contributing elements", left.getSI(i, j)
                        * right.getSI(i, j), result.getSI(i, j), 0.001);
                }
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test that malformed or mismatching arrays throw a ValueException.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void sizeCheckRelTest()
    {
        int junk = 0;
        try
        {
            // null array
            new FloatMatrix.Rel<TemperatureUnit>((float[][]) null, TemperatureUnit.DEGREE_FAHRENHEIT,
                StorageType.SPARSE);
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        try
        {
            // Matrix with null on first row
            float[][] in = data(3, 5, false, 12.3f);
            in[0] = null;
            new FloatMatrix.Rel<TemperatureUnit>(in, TemperatureUnit.DEGREE_CELSIUS, StorageType.SPARSE);
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        try
        {
            // Matrix with null on last row
            float[][] in = data(3, 5, false, 12.3f);
            in[in.length - 1] = null;
            new FloatMatrix.Rel<TemperatureUnit>(in, TemperatureUnit.DEGREE_CELSIUS, StorageType.SPARSE);
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        try
        {
            // Non-rectangular array
            float[][] in = data(3, 5, true, 12.3f);
            new FloatMatrix.Rel<TemperatureUnit>(in, TemperatureUnit.DEGREE_CELSIUS, StorageType.SPARSE);
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        // Determinant of non-square Matrix
        float[][] in = data(3, 5, false, 12.3f);
        try
        {
            FloatMatrix.Rel<TemperatureUnit> matrix = null;
            try
            {
                matrix = new FloatMatrix.Rel<TemperatureUnit>(in, TemperatureUnit.DEGREE_CELSIUS, StorageType.SPARSE);
            }
            catch (ValueException ve)
            {
                fail("Caught unexpected exception: " + ve.toString());
            }
            matrix.determinant();
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        assertTrue("The variable junk is only used to suppress annoying warnings of the code checker", junk > 0);
    }

    /**
     * Test the det method that computes and returns the determinant.
     */
    @SuppressWarnings("static-method")
    @Test
    public final void determinantRelTest()
    {
        try
        {
            float[][] values = {{1, 2, 3}, {3, 5, 7}, {5, 10, 0}};
            FloatMatrix.Rel<TemperatureUnit> matrix =
                new FloatMatrix.Rel<TemperatureUnit>(values, TemperatureUnit.KELVIN, StorageType.SPARSE);
            assertEquals("Determinant should be 15", 15, matrix.determinant(), 0.001);
        }
        catch (ValueException ve)
        {
            if (ve.toString().contains("Matrix must be sparse"))
            {
                System.err.println("Ignoring bug in COLT library");
                return;
            }
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /** */
    interface FloatToFloat
    {
        /**
         * @param d float; value
         * @return float value
         */
        float function(float d);
    }

    /** */
    abstract static class MathTester
    {
        /**
         * Test a math function.
         * @param inputValues float[][]; unprocessed value
         * @param operation String; description of method that is being tested
         * @param actualResult FloatMatrix&lt;?&gt;; the actual result of the operation
         * @param precision float; expected accuracy
         * @param function FloatToFloat; encapsulated function that converts one inputValue to an outputValue
         */
        public static void tester(final float[][] inputValues, final String operation,
            final FloatMatrix<?> actualResult, final double precision, final FloatToFloat function)
        {
            for (int i = 0; i < inputValues.length; i++)
            {
                for (int j = 0; j < inputValues[i].length; j++)
                {
                    float expectedResult = function.function(inputValues[i][j]);
                    float got = 0;
                    try
                    {
                        got = actualResult.getSI(i, j);
                    }
                    catch (ValueException ve)
                    {
                        fail("Caught unexpected exception: " + ve.toString());
                    }
                    String description =
                        String.format("%s(%f->%f should be equal to %f with precision %f", operation,
                            inputValues[i][j], expectedResult, got, precision);
                    // System.out.println(description);
                    assertEquals(description, expectedResult, got, precision);
                }
            }
        }

    }

}
