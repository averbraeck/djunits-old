package org.djunits.value.vfloat.matrix.copy;

import org.djunits.unit.Unit;
import org.djunits.value.Absolute;
import org.djunits.value.DenseData;
import org.djunits.value.Relative;
import org.djunits.value.SparseData;
import org.djunits.value.ValueException;
import org.djunits.value.ValueUtil;
import org.djunits.value.vfloat.FloatFunction;
import org.djunits.value.vfloat.FloatMathFunctions;
import org.djunits.value.vfloat.FloatMathFunctionsImpl;
import org.djunits.value.vfloat.scalar.FloatScalar;

/**
 * MutableFloatMatrix.
 * <p>
 * This file was generated by the djunits value classes generator, 26 jun, 2015
 * <p>
 * Copyright (c) 2015 Delft University of Technology, PO Box 5, 2600 AA, Delft, the Netherlands. All rights reserved. <br>
 * BSD-style license. See <a href="http://djunits.org/docs/license.html">DJUNITS License</a>.
 * <p>
 * $LastChangedDate: 2015-10-04 05:23:13 +0200 (Sun, 04 Oct 2015) $, @version $Revision: 81 $, by $Author: averbraeck $, initial
 * version 26 jun, 2015 <br>
 * @author <a href="http://www.tbm.tudelft.nl/averbraeck">Alexander Verbraeck</a>
 * @author <a href="http://www.tudelft.nl/pknoppers">Peter Knoppers</a>
 * @param <U> Unit; the unit of this MutableFloatMatrix
 */
public abstract class MutableFloatMatrix<U extends Unit<U>> extends FloatMatrix<U> implements
    WriteFloatMatrixFunctions<U>, FloatMathFunctions<MutableFloatMatrix<U>>
{
    /**  */
    private static final long serialVersionUID = 20151003L;

    /**
     * Construct a new MutableFloatMatrix.
     * @param unit U; the unit of the new MutableFloatMatrix
     */
    protected MutableFloatMatrix(final U unit)
    {
        super(unit);
    }

    /** If set, any modification of the data must be preceded by replacing the data with a local copy. */
    private boolean copyOnWrite = false;

    /**
     * Retrieve the value of the copyOnWrite flag.
     * @return boolean
     */
    private boolean isCopyOnWrite()
    {
        return this.copyOnWrite;
    }

    /**
     * Change the copyOnWrite flag.
     * @param copyOnWrite boolean; the new value for the copyOnWrite flag
     */
    final void setCopyOnWrite(final boolean copyOnWrite)
    {
        this.copyOnWrite = copyOnWrite;
    }

    /** ============================================================================================ */
    /** ================================= ABSOLUTE IMPLEMENTATION ================================== */
    /** ============================================================================================ */

    /**
     * @param <U> Unit the unit for which this Matrix will be created
     */
    public abstract static class Abs<U extends Unit<U>> extends MutableFloatMatrix<U> implements Absolute
    {
        /**  */
        private static final long serialVersionUID = 20151003L;

        /**
         * Construct a new Absolute MutableFloatMatrix.
         * @param unit U; the unit of the new Absolute MutableFloatMatrix
         */
        protected Abs(final U unit)
        {
            super(unit);
        }

        /**
         * ABSOLUTE DENSE implementation of MutableFloatMatrix.
         * @param <U> Unit the unit for which this Matrix will be created
         */
        public static class Dense<U extends Unit<U>> extends Abs<U> implements DenseData
        {
            /**  */
            private static final long serialVersionUID = 20151003L;

            /**
             * Construct a new Absolute Dense MutableFloatMatrix.
             * @param values float[][]; the initial values of the entries in the new Absolute Dense MutableFloatMatrix
             * @param unit U; the unit of the new Absolute Dense MutableFloatMatrix
             * @throws ValueException when values is null, or is not rectangular
             */
            public Dense(final float[][] values, final U unit) throws ValueException
            {
                super(unit);
                this.data = initializeDense(values);
            }

            /**
             * Construct a new Absolute Dense MutableFloatMatrix.
             * @param values FloatScalar.Abs&lt;U&gt;[][]; the initial values of the entries in the new Absolute Dense
             *            MutableFloatMatrix
             * @throws ValueException when values has zero entries, or is not rectangular
             */
            public Dense(final FloatScalar.Abs<U>[][] values) throws ValueException
            {
                super(checkNonEmpty(values)[0][0].getUnit());
                this.data = initializeDense(values);
            }

            /**
             * Construct a new Absolute Dense Mutable FloatMatrix.
             * @param data an internal data object
             * @param unit the unit
             */
            Dense(final FloatMatrixDataDense data, final U unit)
            {
                super(unit);
                this.data = data.copy();
            }

            /** {@inheritDoc} */
            @Override
            public final FloatMatrix.Abs.Dense<U> immutable()
            {
                setCopyOnWrite(true);
                return new FloatMatrix.Abs.Dense<U>(getData(), getUnit());
            }

            /** {@inheritDoc} */
            @Override
            public final MutableFloatMatrix.Abs.Dense<U> mutable()
            {
                setCopyOnWrite(true);
                final MutableFloatMatrix.Abs.Dense<U> result =
                    new MutableFloatMatrix.Abs.Dense<U>(getData(), getUnit());
                result.setCopyOnWrite(true);
                return result;
            }

            /** {@inheritDoc} */
            @Override
            public final MutableFloatMatrix.Abs.Dense<U> copy()
            {
                return mutable();
            }

            /** {@inheritDoc} */
            @Override
            protected final FloatMatrixDataDense getData()
            {
                return (FloatMatrixDataDense) this.data;
            }
        }

        /**
         * ABSOLUTE SPARSE implementation of MutableFloatMatrix.
         * @param <U> Unit the unit for which this Matrix will be created
         */
        public static class Sparse<U extends Unit<U>> extends Abs<U> implements SparseData
        {
            /**  */
            private static final long serialVersionUID = 20151003L;

            /**
             * Construct a new Absolute Sparse MutableFloatMatrix.
             * @param values float[][]; the initial values of the entries in the new Absolute Sparse MutableFloatMatrix
             * @param unit U; the unit of the new Absolute Sparse MutableFloatMatrix
             * @throws ValueException when values is null, or is not rectangular
             */
            public Sparse(final float[][] values, final U unit) throws ValueException
            {
                super(unit);
                this.data = initializeSparse(values);
            }

            /**
             * Construct a new Absolute Sparse MutableFloatMatrix.
             * @param values FloatScalar.Abs&lt;U&gt;[][]; the initial values of the entries in the new Absolute Sparse
             *            MutableFloatMatrix
             * @throws ValueException when values has zero entries, or is not rectangular
             */
            public Sparse(final FloatScalar.Abs<U>[][] values) throws ValueException
            {
                super(checkNonEmpty(values)[0][0].getUnit());
                this.data = initializeSparse(values);
            }

            /**
             * Construct a new Absolute Sparse Mutable FloatMatrix.
             * @param data an internal data object
             * @param unit the unit
             */
            Sparse(final FloatMatrixDataSparse data, final U unit)
            {
                super(unit);
                this.data = data.copy();
            }

            /** {@inheritDoc} */
            @Override
            public final FloatMatrix.Abs.Sparse<U> immutable()
            {
                setCopyOnWrite(true);
                return new FloatMatrix.Abs.Sparse<U>(getData(), getUnit());
            }

            /** {@inheritDoc} */
            @Override
            public final MutableFloatMatrix.Abs.Sparse<U> mutable()
            {
                setCopyOnWrite(true);
                final MutableFloatMatrix.Abs.Sparse<U> result =
                    new MutableFloatMatrix.Abs.Sparse<U>(getData(), getUnit());
                result.setCopyOnWrite(true);
                return result;
            }

            /** {@inheritDoc} */
            @Override
            public final MutableFloatMatrix.Abs.Sparse<U> copy()
            {
                return mutable();
            }

            /** {@inheritDoc} */
            @Override
            protected final FloatMatrixDataSparse getData()
            {
                return (FloatMatrixDataSparse) this.data;
            }
        }

        /** {@inheritDoc} */
        @Override
        public final FloatScalar.Abs<U> get(final int row, final int column) throws ValueException
        {
            return new FloatScalar.Abs<U>(getInUnit(row, column, getUnit()), getUnit());
        }

        /**
         * Increment the value by the supplied value and return the result.
         * @param increment FloatMatrix.Rel&lt;U&gt;; amount by which the value is incremented
         * @return MutableFloatMatrix.Abs&lt;U&gt;
         * @throws ValueException when the size of increment is not identical to the size of this
         */
        public final MutableFloatMatrix.Abs<U> incrementBy(final FloatMatrix.Rel<U> increment) throws ValueException
        {
            return (MutableFloatMatrix.Abs<U>) incrementByImpl(increment);
        }

        /**
         * Decrement the value by the supplied value and return the result.
         * @param decrement FloatMatrix.Rel&lt;U&gt;; amount by which the value is decremented
         * @return MutableFloatMatrix.Abs&lt;U&gt;
         * @throws ValueException when the size of increment is not identical to the size of this
         */
        public final MutableFloatMatrix.Abs<U> decrementBy(final FloatMatrix.Rel<U> decrement) throws ValueException
        {
            return (MutableFloatMatrix.Abs<U>) decrementByImpl(decrement);
        }

        /**********************************************************************************/
        /********************************** MATH METHODS **********************************/
        /**********************************************************************************/

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> abs()
        {
            assign(FloatMathFunctionsImpl.ABS);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> acos()
        {
            assign(FloatMathFunctionsImpl.ACOS);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> asin()
        {
            assign(FloatMathFunctionsImpl.ASIN);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> atan()
        {
            assign(FloatMathFunctionsImpl.ATAN);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> cbrt()
        {
            assign(FloatMathFunctionsImpl.CBRT);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> ceil()
        {
            assign(FloatMathFunctionsImpl.CEIL);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> cos()
        {
            assign(FloatMathFunctionsImpl.COS);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> cosh()
        {
            assign(FloatMathFunctionsImpl.COSH);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> exp()
        {
            assign(FloatMathFunctionsImpl.EXP);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> expm1()
        {
            assign(FloatMathFunctionsImpl.EXPM1);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> floor()
        {
            assign(FloatMathFunctionsImpl.FLOOR);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> log()
        {
            assign(FloatMathFunctionsImpl.LOG);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> log10()
        {
            assign(FloatMathFunctionsImpl.LOG10);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> log1p()
        {
            assign(FloatMathFunctionsImpl.LOG1P);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> pow(final double x)
        {
            assign(FloatMathFunctionsImpl.POW((float) x));
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> rint()
        {
            assign(FloatMathFunctionsImpl.RINT);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> round()
        {
            assign(FloatMathFunctionsImpl.ROUND);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> signum()
        {
            assign(FloatMathFunctionsImpl.SIGNUM);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> sin()
        {
            assign(FloatMathFunctionsImpl.SIN);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> sinh()
        {
            assign(FloatMathFunctionsImpl.SINH);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> sqrt()
        {
            assign(FloatMathFunctionsImpl.SQRT);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> tan()
        {
            assign(FloatMathFunctionsImpl.TAN);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> tanh()
        {
            assign(FloatMathFunctionsImpl.TANH);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> toDegrees()
        {
            assign(FloatMathFunctionsImpl.TO_DEGREES);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> toRadians()
        {
            assign(FloatMathFunctionsImpl.TO_RADIANS);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> inv()
        {
            assign(FloatMathFunctionsImpl.INV);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> multiplyBy(final float constant)
        {
            assign(FloatMathFunctionsImpl.MULT(constant));
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Abs<U> divideBy(final float constant)
        {
            assign(FloatMathFunctionsImpl.DIV(constant));
            return this;
        }

    }

    /**
     * @param <U> Unit
     */
    public abstract static class Rel<U extends Unit<U>> extends MutableFloatMatrix<U> implements Relative
    {
        /**  */
        private static final long serialVersionUID = 20151003L;

        /**
         * Construct a new Relative MutableFloatMatrix.
         * @param unit U; the unit of the new Relative MutableFloatMatrix
         */
        protected Rel(final U unit)
        {
            super(unit);
        }

        /**
         * RELATIVE DENSE implementation of MutableFloatMatrix.
         * @param <U> Unit the unit for which this Matrix will be created
         */
        public static class Dense<U extends Unit<U>> extends Rel<U> implements DenseData
        {
            /**  */
            private static final long serialVersionUID = 20151003L;

            /**
             * Construct a new Relative Dense MutableFloatMatrix.
             * @param values float[][]; the initial values of the entries in the new Relative Dense MutableFloatMatrix
             * @param unit U; the unit of the new Relative Dense MutableFloatMatrix
             * @throws ValueException when values is null, or is not rectangular
             */
            public Dense(final float[][] values, final U unit) throws ValueException
            {
                super(unit);
                this.data = initializeDense(values);
            }

            /**
             * Construct a new Relative Dense MutableFloatMatrix.
             * @param values FloatScalar.Rel&lt;U&gt;[][]; the initial values of the entries in the new Relative Dense
             *            MutableFloatMatrix
             * @throws ValueException when values has zero entries, or is not rectangular
             */
            public Dense(final FloatScalar.Rel<U>[][] values) throws ValueException
            {
                super(checkNonEmpty(values)[0][0].getUnit());
                this.data = initializeDense(values);
            }

            /**
             * Construct a new Relative Dense Mutable FloatMatrix.
             * @param data an internal data object
             * @param unit the unit
             */
            Dense(final FloatMatrixDataDense data, final U unit)
            {
                super(unit);
                this.data = data.copy();
            }

            /** {@inheritDoc} */
            @Override
            public final FloatMatrix.Rel.Dense<U> immutable()
            {
                setCopyOnWrite(true);
                return new FloatMatrix.Rel.Dense<U>(getData(), getUnit());
            }

            /** {@inheritDoc} */
            @Override
            public final MutableFloatMatrix.Rel.Dense<U> mutable()
            {
                setCopyOnWrite(true);
                final MutableFloatMatrix.Rel.Dense<U> result =
                    new MutableFloatMatrix.Rel.Dense<U>(getData(), getUnit());
                result.setCopyOnWrite(true);
                return result;
            }

            /** {@inheritDoc} */
            @Override
            public final MutableFloatMatrix.Rel.Dense<U> copy()
            {
                return mutable();
            }

            /** {@inheritDoc} */
            @Override
            protected final FloatMatrixDataDense getData()
            {
                return (FloatMatrixDataDense) this.data;
            }
        }

        /**
         * RELATIVE SPARSE implementation of MutableFloatMatrix.
         * @param <U> Unit the unit for which this Matrix will be created
         */
        public static class Sparse<U extends Unit<U>> extends Rel<U> implements SparseData
        {
            /**  */
            private static final long serialVersionUID = 20151003L;

            /**
             * Construct a new Relative Sparse MutableFloatMatrix.
             * @param values float[][]; the initial values of the entries in the new Relative Sparse MutableFloatMatrix
             * @param unit U; the unit of the new Relative Sparse MutableFloatMatrix
             * @throws ValueException when values is null, or is not rectangular
             */
            public Sparse(final float[][] values, final U unit) throws ValueException
            {
                super(unit);
                this.data = initializeSparse(values);
            }

            /**
             * Construct a new Relative Sparse MutableFloatMatrix.
             * @param values FloatScalar.Rel&lt;U&gt;[][]; the initial values of the entries in the new Relative Sparse
             *            MutableFloatMatrix
             * @throws ValueException when values has zero entries, or is not rectangular
             */
            public Sparse(final FloatScalar.Rel<U>[][] values) throws ValueException
            {
                super(checkNonEmpty(values)[0][0].getUnit());
                this.data = initializeSparse(values);
            }

            /**
             * Construct a new Relative Sparse Mutable FloatMatrix.
             * @param data an internal data object
             * @param unit the unit
             */
            Sparse(final FloatMatrixDataSparse data, final U unit)
            {
                super(unit);
                this.data = data.copy();
            }

            /** {@inheritDoc} */
            @Override
            public final FloatMatrix.Rel.Sparse<U> immutable()
            {
                setCopyOnWrite(true);
                return new FloatMatrix.Rel.Sparse<U>(getData(), getUnit());
            }

            /** {@inheritDoc} */
            @Override
            public final MutableFloatMatrix.Rel.Sparse<U> mutable()
            {
                setCopyOnWrite(true);
                final MutableFloatMatrix.Rel.Sparse<U> result =
                    new MutableFloatMatrix.Rel.Sparse<U>(getData(), getUnit());
                result.setCopyOnWrite(true);
                return result;
            }

            /** {@inheritDoc} */
            @Override
            public final MutableFloatMatrix.Rel.Sparse<U> copy()
            {
                return mutable();
            }

            /** {@inheritDoc} */
            @Override
            protected final FloatMatrixDataSparse getData()
            {
                return (FloatMatrixDataSparse) this.data;
            }
        }

        /** {@inheritDoc} */
        @Override
        public final FloatScalar.Rel<U> get(final int row, final int column) throws ValueException
        {
            return new FloatScalar.Rel<U>(getInUnit(row, column, getUnit()), getUnit());
        }

        /**
         * Increment the value by the supplied value and return the result.
         * @param increment FloatMatrix.Rel&lt;U&gt;; amount by which the value is incremented
         * @return MutableFloatMatrix.Rel&lt;U&gt;
         * @throws ValueException when the size of increment is not identical to the size of this
         */
        public final MutableFloatMatrix.Rel<U> incrementBy(final FloatMatrix.Rel<U> increment) throws ValueException
        {
            return (MutableFloatMatrix.Rel<U>) incrementByImpl(increment);
        }

        /**
         * Decrement the value by the supplied value and return the result.
         * @param decrement FloatMatrix.Rel&lt;U&gt;; amount by which the value is decremented
         * @return MutableFloatMatrix.Rel&lt;U&gt;
         * @throws ValueException when the size of increment is not identical to the size of this
         */
        public final MutableFloatMatrix.Rel<U> decrementBy(final FloatMatrix.Rel<U> decrement) throws ValueException
        {
            return (MutableFloatMatrix.Rel<U>) decrementByImpl(decrement);
        }

        /**********************************************************************************/
        /********************************** MATH METHODS **********************************/
        /**********************************************************************************/

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> abs()
        {
            assign(FloatMathFunctionsImpl.ABS);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> acos()
        {
            assign(FloatMathFunctionsImpl.ACOS);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> asin()
        {
            assign(FloatMathFunctionsImpl.ASIN);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> atan()
        {
            assign(FloatMathFunctionsImpl.ATAN);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> cbrt()
        {
            assign(FloatMathFunctionsImpl.CBRT);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> ceil()
        {
            assign(FloatMathFunctionsImpl.CEIL);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> cos()
        {
            assign(FloatMathFunctionsImpl.COS);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> cosh()
        {
            assign(FloatMathFunctionsImpl.COSH);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> exp()
        {
            assign(FloatMathFunctionsImpl.EXP);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> expm1()
        {
            assign(FloatMathFunctionsImpl.EXPM1);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> floor()
        {
            assign(FloatMathFunctionsImpl.FLOOR);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> log()
        {
            assign(FloatMathFunctionsImpl.LOG);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> log10()
        {
            assign(FloatMathFunctionsImpl.LOG10);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> log1p()
        {
            assign(FloatMathFunctionsImpl.LOG1P);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> pow(final double x)
        {
            assign(FloatMathFunctionsImpl.POW((float) x));
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> rint()
        {
            assign(FloatMathFunctionsImpl.RINT);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> round()
        {
            assign(FloatMathFunctionsImpl.ROUND);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> signum()
        {
            assign(FloatMathFunctionsImpl.SIGNUM);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> sin()
        {
            assign(FloatMathFunctionsImpl.SIN);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> sinh()
        {
            assign(FloatMathFunctionsImpl.SINH);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> sqrt()
        {
            assign(FloatMathFunctionsImpl.SQRT);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> tan()
        {
            assign(FloatMathFunctionsImpl.TAN);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> tanh()
        {
            assign(FloatMathFunctionsImpl.TANH);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> toDegrees()
        {
            assign(FloatMathFunctionsImpl.TO_DEGREES);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> toRadians()
        {
            assign(FloatMathFunctionsImpl.TO_RADIANS);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> inv()
        {
            assign(FloatMathFunctionsImpl.INV);
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> multiplyBy(final float constant)
        {
            assign(FloatMathFunctionsImpl.MULT(constant));
            return this;
        }

        /** {@inheritDoc} */
        @Override
        public final MutableFloatMatrix.Rel<U> divideBy(final float constant)
        {
            assign(FloatMathFunctionsImpl.DIV(constant));
            return this;
        }

    }

    /**
     * Make (immutable) FloatMatrix equivalent for any type of MutableFloatMatrix.
     * @return FloatMatrix&lt;U&gt;; immutable version of this FloatMatrix
     */
    public abstract FloatMatrix<U> immutable();

    /**
     * Check the copyOnWrite flag and, if it is set, make a deep copy of the data and clear the flag.
     */
    protected final void checkCopyOnWrite()
    {
        if (isCopyOnWrite())
        {
            this.data = this.data.copy();
            setCopyOnWrite(false);
        }
    }

    /** {@inheritDoc} */
    @Override
    public final void setSI(final int row, final int column, final float valueSI) throws ValueException
    {
        checkIndex(row, column);
        checkCopyOnWrite();
        safeSet(row, column, valueSI);
    }

    /** {@inheritDoc} */
    @Override
    public final void set(final int row, final int column, final FloatScalar<U> value) throws ValueException
    {
        setSI(row, column, value.getSI());
    }

    /** {@inheritDoc} */
    @Override
    public final void setInUnit(final int row, final int column, final float value, final U valueUnit)
        throws ValueException
    {
        setSI(row, column, (float) ValueUtil.expressAsSIUnit(value, valueUnit));
    }

    /**
     * Execute a function on a cell by cell basis. Note: because many functions have to act on zero cells or can generate cells
     * with a zero value, the functions have to be applied on a dense dataset which has to be transformed back to a dense
     * dataset if necessary.
     * @param floatFunction the function to apply
     */
    public final void assign(final FloatFunction floatFunction)
    {
        checkCopyOnWrite();
        if (this.data instanceof FloatMatrixDataDense)
        {
            ((FloatMatrixDataDense) this.data).assign(floatFunction);
        }
        else
        {
            FloatMatrixDataDense dvmd = ((FloatMatrixDataSparse) this.data).toDense();
            dvmd.assign(floatFunction);
            this.data = dvmd.toSparse();
        }
    }

    /**********************************************************************************/
    /******************************* NON-STATIC METHODS *******************************/
    /**********************************************************************************/

    /**
     * Increment the values in this MutableFloatMatrix by the corresponding values in a FloatMatrix.
     * @param increment FloatMatrix&lt;U&gt;; the values by which to increment the corresponding values in this
     *            MutableFloatMatrix
     * @return MutableFloatMatrix&lt;U&gt;; this modified MutableFloatMatrix
     * @throws ValueException when the matrices do not have the same size
     */
    private MutableFloatMatrix<U> incrementValueByValue(final FloatMatrix<U> increment) throws ValueException
    {
        checkSizeAndCopyOnWrite(increment);
        for (int row = rows(); --row >= 0;)
        {
            for (int column = columns(); --column >= 0;)
            {
                safeSet(row, column, safeGet(row, column) + increment.safeGet(row, column));
            }
        }
        return this;
    }

    /**
     * Decrement the values in this MutableFloatMatrix by the corresponding values in a FloatMatrix.
     * @param decrement FloatMatrix&lt;U&gt;; the values by which to decrement the corresponding values in this
     *            MutableFloatMatrix
     * @return MutableFloatMatrix&lt;U&gt;; this modified MutableFloatMatrix
     * @throws ValueException when the matrices do not have the same size
     */
    private MutableFloatMatrix<U> decrementValueByValue(final FloatMatrix<U> decrement) throws ValueException
    {
        checkSizeAndCopyOnWrite(decrement);
        for (int row = rows(); --row >= 0;)
        {
            for (int column = columns(); --column >= 0;)
            {
                safeSet(row, column, safeGet(row, column) - decrement.safeGet(row, column));
            }
        }
        return this;
    }

    /**
     * Increment the values in this MutableFloatMatrix by the corresponding values in a Relative FloatMatrix. <br>
     * Only Relative values are allowed; adding an Absolute value to an Absolute value is not allowed. Adding an Absolute value
     * to an existing Relative value would require the result to become Absolute, which is a type change that is impossible. For
     * that operation use a static method.
     * @param rel FloatMatrix.Rel&lt;U&gt;; the Relative FloatMatrix
     * @return MutableFloatMatrix&lt;U&gt;; this modified MutableFloatMatrix
     * @throws ValueException when the matrices do not have the same size
     */
    protected final MutableFloatMatrix<U> incrementByImpl(final FloatMatrix.Rel<U> rel) throws ValueException
    {
        return incrementValueByValue(rel);
    }

    /**
     * Decrement the corresponding values of this Relative FloatMatrix from the values of this MutableFloatMatrix. <br>
     * Only Relative values are allowed; subtracting an Absolute value from a Relative value is not allowed. Subtracting an
     * Absolute value from an existing Absolute value would require the result to become Relative, which is a type change that
     * is impossible. For that operation use a static method.
     * @param rel FloatMatrix.Rel&lt;U&gt;; the Relative FloatMatrix
     * @return MutableFloatMatrix&lt;U&gt;; this modified MutableFloatMatrix
     * @throws ValueException when the matrices do not have the same size
     */
    protected final MutableFloatMatrix<U> decrementByImpl(final FloatMatrix.Rel<U> rel) throws ValueException
    {
        return decrementValueByValue(rel);
    }

    /**
     * Scale the values in this MutableFloatMatrix by the corresponding values in a FloatMatrix.
     * @param factor FloatMatrix&lt;?&gt;; contains the values by which to scale the corresponding values in this
     *            MutableFloatMatrix
     * @throws ValueException when the matrices do not have the same size
     */
    protected final void scaleValueByValue(final FloatMatrix<?> factor) throws ValueException
    {
        checkSizeAndCopyOnWrite(factor);
        for (int row = rows(); --row >= 0;)
        {
            for (int column = columns(); --column >= 0;)
            {
                safeSet(row, column, safeGet(row, column) * factor.safeGet(row, column));
            }
        }
    }

    /**
     * Scale the values in this MutableFloatMatrix by the corresponding values in a float array.
     * @param factor float[][]; contains the values by which to scale the corresponding values in this MutableFloatMatrix
     * @return MutableFloatMatrix&lt;U&gt;; this modified MutableFloatMatrix
     * @throws ValueException when the matrix and the array do not have the same size
     */
    protected final MutableFloatMatrix<U> scaleValueByValue(final float[][] factor) throws ValueException
    {
        checkSizeAndCopyOnWrite(factor);
        for (int row = rows(); --row >= 0;)
        {
            for (int column = columns(); --column >= 0;)
            {
                safeSet(row, column, safeGet(row, column) * factor[row][column]);
            }
        }
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public final void normalize() throws ValueException
    {
        float sum = zSum();
        if (0 == sum)
        {
            throw new ValueException("zSum is 0; cannot normalize");
        }
        checkCopyOnWrite();
        for (int row = rows(); --row >= 0;)
        {
            for (int column = columns(); --column >= 0;)
            {
                // TODO parallel divide by factor
                safeSet(row, column, safeGet(row, column) / sum);
            }
        }
    }

    /**
     * Check sizes and copy the data if the copyOnWrite flag is set.
     * @param other FloatMatrix&lt;?&gt;; partner for the size check
     * @throws ValueException when the matrices do not have the same size
     */
    private void checkSizeAndCopyOnWrite(final FloatMatrix<?> other) throws ValueException
    {
        checkSize(other);
        checkCopyOnWrite();
    }

    /**
     * Check sizes and copy the data if the copyOnWrite flag is set.
     * @param other float[][]; partner for the size check
     * @throws ValueException when the matrices do not have the same size
     */
    private void checkSizeAndCopyOnWrite(final float[][] other) throws ValueException
    {
        checkSize(other);
        checkCopyOnWrite();
    }

}
