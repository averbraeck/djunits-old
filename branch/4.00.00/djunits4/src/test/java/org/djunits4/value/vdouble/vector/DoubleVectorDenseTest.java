package org.djunits4.value.vdouble.vector;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.djunits4.unit.AbsoluteTemperatureUnit;
import org.djunits4.unit.LengthUnit;
import org.djunits4.unit.PositionUnit;
import org.djunits4.unit.TemperatureUnit;
import org.djunits4.unit.Unit;
import org.djunits4.value.StorageType;
import org.djunits4.value.ValueException;
import org.djunits4.value.vdouble.scalar.DoubleScalar;
import org.junit.Test;

/**
 * Test the DoubleVector class.
 * <p>
 * This file was generated by the djunits value test classes generator, 26 jun, 2015
 * <p>
 * Copyright (c) 2015-2019 Delft University of Technology, PO Box 5, 2600 AA, Delft, the Netherlands. All rights reserved. <br>
 * BSD-style license. See <a href="http://djunits.org/docs/license.html">DJUNITS License</a>.
 * <p>
 * $LastChangedDate: 2019-08-19 16:28:39 +0200 (Mon, 19 Aug 2019) $, @version $Revision: 429 $, by $Author: pknoppers $,
 * initial version 26 jun, 2015 <br>
 * @author <a href="http://www.tbm.tudelft.nl/averbraeck">Alexander Verbraeck</a>
 * @author <a href="http://www.tudelft.nl/pknoppers">Peter Knoppers</a>
 */
public class DoubleVectorDenseTest
{
    /**
     * Generate test data.
     * @param size int; number of values in the result
     * @param startValue double; seed value
     * @return double[]
     */
    private static double[] data(final int size, final double startValue)
    {
        double[] result = new double[size];
        for (int index = 0; index < size; index++)
        {
            result[index] = index + startValue;
        }
        return result;
    }

    /**
     * Check that the values in a DoubleVectormatch the expected values.
     * @param dv DoubleVector&lt;?&gt;; the DoubleVector to match
     * @param reference double[]; the reference values
     * @param precision double; the maximum allowed error
     * @param u Unit&lt;?&gt;; the expected type
     * @param expectAbsolute boolean; if true; dv should be Absolute; if false; dv should be Relative
     */
    private static void checkContentsAndType(final AbstractDoubleVector<?, ?> dv, final double[] reference,
            final double precision, final Unit<?> u, final boolean expectAbsolute)
    {
        assertTrue("DoubleVector should not be null", null != dv);
        for (int index = dv.size(); --index >= 0;)
        {
            try
            {
                assertEquals("Value should match", reference[index], dv.getInUnit(index), precision);
            }
            catch (ValueException exception)
            {
                fail("Unexpected exception");
            }
        }
        assertEquals("Unit should be " + u.toString(), u, dv.getUnit());
        assertTrue("Should be " + (expectAbsolute ? "Absolute" : "Relative"),
                expectAbsolute ? dv.isAbsolute() : dv.isRelative());
    }

    /**
     * Test that the toString method returns something sensible.
     */
    @Test
    public final void toStringAbsTest()
    {
        try
        {
            AbsoluteTemperatureUnit tempUnit = AbsoluteTemperatureUnit.KELVIN;
            double[] value = data(3, 38.0);
            DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit> dv =
                    new DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            String result = dv.toString(true, true);
            assertTrue("toString result contains \" Abs \"", result.contains(" Abs "));
            assertTrue("toString result contains \"K\"", result.contains("K"));
            assertTrue("toString result starts with \"Immutable \"", result.startsWith("Immutable"));
            assertTrue("toString contains \"Dense\"", result.contains("Dense"));
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test that the toString method returns something sensible.
     */
    @Test
    public final void toStringMutableAbsTest()
    {
        try
        {
            AbsoluteTemperatureUnit tempUnit = AbsoluteTemperatureUnit.KELVIN;
            double[] value = data(3, 38.0);
            MutableDoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit> dv =
                    new MutableDoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            String result = dv.toString(true, true);
            assertTrue("toString result contains \" Abs \"", result.contains(" Abs "));
            assertTrue("toString result contains \"K\"", result.contains("K"));
            assertTrue("toString result starts with \"Immutable \"", result.startsWith("Mutable"));
            assertTrue("toString contains \"Dense\"", result.contains("Dense"));
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test constructor, verify the various fields in the constructed objects, test conversions to related units.
     */
    @SuppressWarnings({ "static-method", "unchecked" })
    @Test
    public final void basicsAbsTest()
    {
        try
        {
            AbsoluteTemperatureUnit tempUnit = AbsoluteTemperatureUnit.DEGREE_CELSIUS;
            double[] value = data(3, 38.0);
            DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit> temperatureDV =
                    new DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            checkContentsAndType(temperatureDV, value, 0.001, tempUnit, true);
            assertEquals("Value in SI is equivalent in Kelvin", 311.15, temperatureDV.getSI(0), 0.05);
            assertEquals("Value in Fahrenheit", 100.4, temperatureDV.getInUnit(0, AbsoluteTemperatureUnit.DEGREE_FAHRENHEIT),
                    0.1);
            double[] out = temperatureDV.getValuesInUnit();
            for (int index = 0; index < value.length; index++)
            {
                assertEquals("Value should match", value[index], out[index], 0.001);
            }
            MutableDoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit> mdv =
                    new MutableDoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            checkContentsAndType(mdv, value, 0.001, tempUnit, true);
            mdv.setSI(0, 73);
            double safe = value[0];
            value[0] = -200; // Approximate Celsius equivalent of 73 Kelvin
            checkContentsAndType(mdv, value, 1, tempUnit, true);
            value[0] = safe; // Restore
            mdv.set(0, temperatureDV.get(0));
            checkContentsAndType(mdv, value, 0.001, tempUnit, true);
            DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit> temperature2DV =
                    new DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit>(temperatureDV.getValuesSI(),
                            AbsoluteTemperatureUnit.KELVIN, StorageType.DENSE);
            assertTrue("temperature2DV should be equal to temperatureDV", temperature2DV.equals(temperatureDV));
            assertTrue("Value is Absolute", temperatureDV.isAbsolute());
            assertFalse("Value is not Relative", temperatureDV.isRelative());
            temperatureDV = new DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit>(value,
                    AbsoluteTemperatureUnit.KELVIN, StorageType.DENSE);
            checkContentsAndType(temperatureDV, value, 0.001, AbsoluteTemperatureUnit.KELVIN, true);
            out = temperatureDV.getValuesSI();
            for (int index = 0; index < value.length; index++)
            {
                assertEquals("Value should match", value[index], out[index], 0.001);
            }
            DoubleScalar.Abs<AbsoluteTemperatureUnit, TemperatureUnit>[] scalar = new DoubleScalar.Abs[value.length];
            for (int index = 0; index < value.length; index++)
            {
                scalar[index] = new DoubleScalar.Abs<AbsoluteTemperatureUnit, TemperatureUnit>(value[index],
                        AbsoluteTemperatureUnit.DEGREE_CELSIUS);
            }
            temperatureDV = new DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit>(scalar, StorageType.DENSE);
            checkContentsAndType(temperatureDV, value, 0.001, tempUnit, true);
            assertEquals("All cells != 0; cardinality should equal number of cells", value.length, temperatureDV.cardinality());
            double sum = 0;
            for (int index = 0; index < value.length; index++)
            {
                sum += temperatureDV.getSI(index);
            }
            assertEquals("zSum should be sum of all values", sum, temperatureDV.zSum(), 0.001);
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test conversion to mutable equivalent and back.
     */
    @Test
    public final void toMutableAndBackAbsTest()
    {
        try
        {
            AbsoluteTemperatureUnit tempUnit = AbsoluteTemperatureUnit.DEGREE_CELSIUS;
            double[] value = data(3, 38.0);
            double[] value2 = data(3, 38.0);
            value2[0] = 12345;
            DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit> dv =
                    new DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit> dvCopy = dv;
            MutableDoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit> mdv = dv.mutable();
            checkContentsAndType(dv, value, 0.001, tempUnit, true);
            checkContentsAndType(mdv, value, 0.001, tempUnit, true);
            checkContentsAndType(dvCopy, value, 0.001, tempUnit, true);
            MutableDoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit> mdvCopy = mdv.copy();
            checkContentsAndType(mdvCopy, value, 0.001, tempUnit, true);
            MutableDoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit> mmdv = mdv.mutable();
            checkContentsAndType(mmdv, value, 0.001, tempUnit, true);
            assertEquals("hashCode is independent on mutability", dv.hashCode(), mdv.hashCode());
            // Modify mdv
            mdv.setInUnit(0, 12345, AbsoluteTemperatureUnit.DEGREE_CELSIUS);
            checkContentsAndType(dv, value, 0.001, tempUnit, true);
            checkContentsAndType(mdv, value2, 0.01, tempUnit, true);
            checkContentsAndType(mdvCopy, value, 0.001, tempUnit, true);
            checkContentsAndType(mmdv, value, 0.001, tempUnit, true);
            DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit> idv = mdv.immutable();
            assertTrue("Different value extremely likely results in different hashCode", dv.hashCode() != mdv.hashCode());
            // Restore value of mdv
            mdv.setSI(0, dv.getSI(0));
            checkContentsAndType(idv, value2, 0.01, tempUnit, true);
            checkContentsAndType(mdv, value, 0.001, tempUnit, true);
            checkContentsAndType(mmdv, value, 0.001, tempUnit, true);
            mmdv.setSI(0, 0);
            checkContentsAndType(mdv, value, 0.001, tempUnit, true);
            assertEquals("value should be about -273", -273, mmdv.getInUnit(0, tempUnit), 0.2);
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test the equals method.
     */
    @Test
    public final void equalsAbsTest()
    {
        LengthUnit lengthUnit = LengthUnit.METER;
        PositionUnit positionUnit = PositionUnit.DEFAULT;
        double value = 38.0;
        DoubleScalar.Abs<PositionUnit, LengthUnit> dv = new DoubleScalar.Abs<PositionUnit, LengthUnit>(value, positionUnit);
        assertTrue("Equal to itself", dv.equals(dv));
        assertFalse("Not equal to null", dv.equals(null));
        assertFalse("Not equal to some other kind of object; e.g. a String", dv.equals(new String("abc")));
        DoubleScalar.Rel<LengthUnit> dvCounterPart = new DoubleScalar.Rel<LengthUnit>(value, lengthUnit);
        assertFalse("Not equal if one Absolute and other Relative", dv.equals(dvCounterPart));
        DoubleScalar.Abs<AbsoluteTemperatureUnit, TemperatureUnit> dvWrongBaseUnit =
                new DoubleScalar.Abs<AbsoluteTemperatureUnit, TemperatureUnit>(value, AbsoluteTemperatureUnit.KELVIN);
        assertEquals("The underlying SI values are the same", dv.getSI(), dvWrongBaseUnit.getSI(), 0.0001);
        assertFalse("Not equals because the standard SI unit differs", dv.equals(dvWrongBaseUnit));
        DoubleScalar.Abs<PositionUnit, LengthUnit> dvCompatibleUnit =
                new DoubleScalar.Abs<PositionUnit, LengthUnit>(38000.0, PositionUnit.MILLIMETER);
        assertFalse("Units are different", dv.getUnit().equals(dvCompatibleUnit.getUnit()));
        assertTrue("equals returns true", dv.equals(dvCompatibleUnit));
        DoubleScalar.Abs<PositionUnit, LengthUnit> dvDifferentValue =
                new DoubleScalar.Abs<PositionUnit, LengthUnit>(123.456, PositionUnit.MILLIMETER);
        assertFalse("Different value makes equals return false", dv.equals(dvDifferentValue));
    }

    /**
     * Test the Math functions.
     */
    @Test
    public final void mathFunctionsTestAbsTest()
    {
        double[] seedValues = { -10, -2, -1, -0.5, -0.1, 0, 0.1, 0.5, 1, 2, 10 };
        for (double seedValue : seedValues)
        {
            double[] input = data(3, seedValue);
            MutableDoubleVector.Abs<PositionUnit, LengthUnit> dv;
            try
            {
                dv = new MutableDoubleVector.Abs<PositionUnit, LengthUnit>(input, PositionUnit.METER, StorageType.DENSE);
                dv.ceil();
                MathTester.tester(input, "ceil", dv, 0.001, new DoubleToDouble()
                {
                    @Override
                    public double function(final double d)
                    {
                        return Math.ceil(d);
                    }
                });
                dv = new MutableDoubleVector.Abs<PositionUnit, LengthUnit>(input, PositionUnit.METER, StorageType.DENSE);
                dv.floor();
                MathTester.tester(input, "floor", dv, 0.001, new DoubleToDouble()
                {
                    @Override
                    public double function(final double d)
                    {
                        return Math.floor(d);
                    }
                });
                dv = new MutableDoubleVector.Abs<PositionUnit, LengthUnit>(input, PositionUnit.METER, StorageType.DENSE);
                dv.rint();
                MathTester.tester(input, "rint", dv, 0.001, new DoubleToDouble()
                {
                    @Override
                    public double function(final double d)
                    {
                        return Math.rint(d);
                    }
                });
                dv = new MutableDoubleVector.Abs<PositionUnit, LengthUnit>(input, PositionUnit.METER, StorageType.DENSE);
                dv.round();
                MathTester.tester(input, "round", dv, 0.001, new DoubleToDouble()
                {
                    @Override
                    public double function(final double d)
                    {
                        return Math.round(d);
                    }
                });
            }
            catch (ValueException ve)
            {
                fail("Caught unexpected ValueException: " + ve.toString());
            }
        }
    }

    /**
     * Test plus(DoubleVectorAbs.Dense, DoubleVectorRel.Dense).
     */
    @Test
    public final void binaryplusOfAbsDenseAndRelDenseTest()
    {
        try
        {
            double[] leftValue = data(3, 123.4);
            double[] rightValue = data(3, 234.5);
            DoubleVector.Abs<PositionUnit, LengthUnit> left =
                    new DoubleVector.Abs<PositionUnit, LengthUnit>(leftValue, PositionUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<LengthUnit> right =
                    new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
            DoubleVector.Abs<?, ?> result = left.plus(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI plus of contributing elements", left.getSI(i) + right.getSI(i),
                        result.getSI(i), 0.001);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test minus(DoubleVectorAbs.Dense, DoubleVectorRel.Dense).
     */
    @Test
    public final void binaryminusOfAbsDenseAndRelDenseTest()
    {
        try
        {
            double[] leftValue = data(3, 123.4);
            double[] rightValue = data(3, 234.5);
            DoubleVector.Abs<PositionUnit, LengthUnit> left =
                    new DoubleVector.Abs<PositionUnit, LengthUnit>(leftValue, PositionUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<LengthUnit> right =
                    new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
            DoubleVector.Abs<?, ?> result = left.minus(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI minus of contributing elements", left.getSI(i) - right.getSI(i),
                        result.getSI(i), 0.001);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test plus(DoubleVectorAbs.Dense, DoubleVectorRel.Sparse).
     */
    @Test
    public final void binaryplusOfAbsDenseAndRelSparseTest()
    {
        try
        {
            double[] leftValue = data(3, 123.4);
            double[] rightValue = data(3, 234.5);
            DoubleVector.Abs<PositionUnit, LengthUnit> left =
                    new DoubleVector.Abs<PositionUnit, LengthUnit>(leftValue, PositionUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<LengthUnit> right =
                    new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
            DoubleVector.Abs<?, ?> result = left.plus(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI plus of contributing elements", left.getSI(i) + right.getSI(i),
                        result.getSI(i), 0.001);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test minus(DoubleVectorAbs.Dense, DoubleVectorRel.Sparse).
     */
    @Test
    public final void binaryminusOfAbsDenseAndRelSparseTest()
    {
        try
        {
            double[] leftValue = data(3, 123.4);
            double[] rightValue = data(3, 234.5);
            DoubleVector.Abs<PositionUnit, LengthUnit> left =
                    new DoubleVector.Abs<PositionUnit, LengthUnit>(leftValue, PositionUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<LengthUnit> right =
                    new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
            DoubleVector.Abs<?, ?> result = left.minus(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI minus of contributing elements", left.getSI(i) - right.getSI(i),
                        result.getSI(i), 0.001);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test that malformed or mismatching arrays throw a ValueException.
     */
    @Test
    public final void sizeCheckAbsTest()
    {
        int junk = 0;
        try
        {
            // null array
            new DoubleVector.Abs<AbsoluteTemperatureUnit, TemperatureUnit>((double[]) null,
                    AbsoluteTemperatureUnit.DEGREE_FAHRENHEIT, StorageType.DENSE);
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        assertTrue("The variable junk is only used to suppress annoying warnings of the code checker", junk > 0);
    }

    /**
     * Test that the toString method returns something sensible.
     */
    @Test
    public final void toStringRelTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.KELVIN;
            double[] value = data(3, 38.0);
            DoubleVector.Rel<TemperatureUnit> dv = new DoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            String result = dv.toString(true, true);
            assertTrue("toString result contains \" Rel \"", result.contains(" Rel "));
            assertTrue("toString result contains \"K\"", result.contains("K"));
            assertTrue("toString result starts with \"Immutable \"", result.startsWith("Immutable"));
            assertTrue("toString contains \"Dense\"", result.contains("Dense"));
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test that the toString method returns something sensible.
     */
    @Test
    public final void toStringMutableRelTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.KELVIN;
            double[] value = data(3, 38.0);
            MutableDoubleVector.Rel<TemperatureUnit> dv =
                    new MutableDoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            String result = dv.toString(true, true);
            assertTrue("toString result contains \" Rel \"", result.contains(" Rel "));
            assertTrue("toString result contains \"K\"", result.contains("K"));
            assertTrue("toString result starts with \"Immutable \"", result.startsWith("Mutable"));
            assertTrue("toString contains \"Dense\"", result.contains("Dense"));
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test constructor, verify the various fields in the constructed objects, test conversions to related units.
     */
    @SuppressWarnings({ "static-method", "unchecked" })
    @Test
    public final void basicsRelTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.DEGREE_CELSIUS;
            double[] value = data(3, 38.0);
            DoubleVector.Rel<TemperatureUnit> temperatureDV =
                    new DoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            checkContentsAndType(temperatureDV, value, 0.001, tempUnit, false);
            assertEquals("Value in SI is equivalent in Kelvin", 38.0, temperatureDV.getSI(0), 0.05);
            assertEquals("Value in Fahrenheit", 38.0 * 9.0 / 5.0, temperatureDV.getInUnit(0, TemperatureUnit.DEGREE_FAHRENHEIT),
                    0.1);
            double[] out = temperatureDV.getValuesInUnit();
            for (int index = 0; index < value.length; index++)
            {
                assertEquals("Value should match", value[index], out[index], 0.001);
            }
            MutableDoubleVector.Rel<TemperatureUnit> mdv =
                    new MutableDoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            checkContentsAndType(mdv, value, 0.001, tempUnit, false);
            DoubleVector.Rel<TemperatureUnit> temperature2DV = new DoubleVector.Rel<TemperatureUnit>(
                    temperatureDV.getValuesSI(), TemperatureUnit.KELVIN, StorageType.DENSE);
            assertTrue("temperature2DV should be equal to temperatureDV", temperature2DV.equals(temperatureDV));
            assertTrue("Value is Relative", temperatureDV.isRelative());
            assertFalse("Value is not Absolute", temperatureDV.isAbsolute());
            temperatureDV = new DoubleVector.Rel<TemperatureUnit>(value, TemperatureUnit.KELVIN, StorageType.DENSE);
            checkContentsAndType(temperatureDV, value, 0.001, TemperatureUnit.KELVIN, false);
            out = temperatureDV.getValuesSI();
            for (int index = 0; index < value.length; index++)
            {
                assertEquals("Value should match", value[index], out[index], 0.001);
            }
            DoubleScalar.Rel<TemperatureUnit>[] scalar = new DoubleScalar.Rel[value.length];
            for (int index = 0; index < value.length; index++)
            {
                scalar[index] = new DoubleScalar.Rel<TemperatureUnit>(value[index], TemperatureUnit.DEGREE_CELSIUS);
            }
            temperatureDV = new DoubleVector.Rel<TemperatureUnit>(scalar, StorageType.DENSE);
            checkContentsAndType(temperatureDV, value, 0.001, tempUnit, false);
            assertEquals("All cells != 0; cardinality should equal number of cells", value.length, temperatureDV.cardinality());
            double sum = 0;
            for (int index = 0; index < value.length; index++)
            {
                sum += temperatureDV.getSI(index);
            }
            assertEquals("zSum should be sum of all values", sum, temperatureDV.zSum(), 0.001);
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test conversion to mutable equivalent and back.
     */
    @Test
    public final void toMutableAndBackRelTest()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.DEGREE_CELSIUS;
            double[] value = data(3, 38.0);
            double[] value2 = data(3, 38.0);
            value2[0] = 12345;
            DoubleVector.Rel<TemperatureUnit> dv = new DoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            DoubleVector.Rel<TemperatureUnit> dvCopy = dv;
            MutableDoubleVector.Rel<TemperatureUnit> mdv = dv.mutable();
            checkContentsAndType(dv, value, 0.001, tempUnit, false);
            checkContentsAndType(mdv, value, 0.001, tempUnit, false);
            checkContentsAndType(dvCopy, value, 0.001, tempUnit, false);
            MutableDoubleVector.Rel<TemperatureUnit> mdvCopy = mdv.copy();
            checkContentsAndType(mdvCopy, value, 0.001, tempUnit, false);
            MutableDoubleVector.Rel<TemperatureUnit> mmdv = mdv.mutable();
            checkContentsAndType(mmdv, value, 0.001, tempUnit, false);
            assertEquals("hashCode is independent on mutability", dv.hashCode(), mdv.hashCode());
            // Modify mdv
            mdv.setInUnit(0, 12345, TemperatureUnit.DEGREE_CELSIUS);
            checkContentsAndType(dv, value, 0.001, tempUnit, false);
            checkContentsAndType(mdv, value2, 0.01, tempUnit, false);
            checkContentsAndType(mdvCopy, value, 0.001, tempUnit, false);
            checkContentsAndType(mmdv, value, 0.001, tempUnit, false);
            DoubleVector.Rel<TemperatureUnit> idv = mdv.immutable();
            assertTrue("Different value extremely likely results in different hashCode", dv.hashCode() != mdv.hashCode());
            // Restore value of mdv
            mdv.setSI(0, dv.getSI(0));
            checkContentsAndType(idv, value2, 0.01, tempUnit, false);
            checkContentsAndType(mdv, value, 0.001, tempUnit, false);
            checkContentsAndType(mmdv, value, 0.001, tempUnit, false);
            mmdv.setSI(0, 0);
            checkContentsAndType(mdv, value, 0.001, tempUnit, false);
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected exception: " + ve.toString());
        }
    }

    /**
     * Test the equals method.
     */
    @Test
    public final void equalsRelTest()
    {
        LengthUnit lengthUnit = LengthUnit.METER;
        PositionUnit positionUnit = PositionUnit.DEFAULT;
        double value = 38.0;
        DoubleScalar.Rel<LengthUnit> dv = new DoubleScalar.Rel<LengthUnit>(value, lengthUnit);
        assertTrue("Equal to itself", dv.equals(dv));
        assertFalse("Not equal to null", dv.equals(null));
        assertFalse("Not equal to some other kind of object; e.g. a String", dv.equals(new String("abc")));
        DoubleScalar.Abs<PositionUnit, LengthUnit> dvCounterPart =
                new DoubleScalar.Abs<PositionUnit, LengthUnit>(value, positionUnit);
        assertFalse("Not equal if one Absolute and other Relative", dv.equals(dvCounterPart));
        DoubleScalar.Rel<TemperatureUnit> dvWrongBaseUnit =
                new DoubleScalar.Rel<TemperatureUnit>(value, TemperatureUnit.KELVIN);
        assertEquals("The underlying SI values are the same", dv.getSI(), dvWrongBaseUnit.getSI(), 0.0001);
        assertFalse("Not equals because the standard SI unit differs", dv.equals(dvWrongBaseUnit));
        DoubleScalar.Rel<LengthUnit> dvCompatibleUnit = new DoubleScalar.Rel<LengthUnit>(38000.0, LengthUnit.MILLIMETER);
        assertFalse("Units are different", dv.getUnit().equals(dvCompatibleUnit.getUnit()));
        assertTrue("equals returns true", dv.equals(dvCompatibleUnit));
        DoubleScalar.Rel<LengthUnit> dvDifferentValue = new DoubleScalar.Rel<LengthUnit>(123.456, LengthUnit.MILLIMETER);
        assertFalse("Different value makes equals return false", dv.equals(dvDifferentValue));
    }

    /**
     * Test the Math functions.
     */
    @Test
    public final void mathFunctionsTestRelTest()
    {
        double[] seedValues = { -10, -2, -1, -0.5, -0.1, 0, 0.1, 0.5, 1, 2, 10 };
        for (double seedValue : seedValues)
        {
            double[] input = data(3, seedValue);
            MutableDoubleVector.Rel<LengthUnit> dv;
            try
            {
                dv = new MutableDoubleVector.Rel<LengthUnit>(input, LengthUnit.METER, StorageType.DENSE);
                dv.abs();
                MathTester.tester(input, "abs", dv, 0.001, new DoubleToDouble()
                {
                    @Override
                    public double function(final double d)
                    {
                        return Math.abs(d);
                    }
                });
                dv = new MutableDoubleVector.Rel<LengthUnit>(input, LengthUnit.METER, StorageType.DENSE);
                dv.ceil();
                MathTester.tester(input, "ceil", dv, 0.001, new DoubleToDouble()
                {
                    @Override
                    public double function(final double d)
                    {
                        return Math.ceil(d);
                    }
                });
                dv = new MutableDoubleVector.Rel<LengthUnit>(input, LengthUnit.METER, StorageType.DENSE);
                dv.floor();
                MathTester.tester(input, "floor", dv, 0.001, new DoubleToDouble()
                {
                    @Override
                    public double function(final double d)
                    {
                        return Math.floor(d);
                    }
                });
                dv = new MutableDoubleVector.Rel<LengthUnit>(input, LengthUnit.METER, StorageType.DENSE);
                dv.rint();
                MathTester.tester(input, "rint", dv, 0.001, new DoubleToDouble()
                {
                    @Override
                    public double function(final double d)
                    {
                        return Math.rint(d);
                    }
                });
                dv = new MutableDoubleVector.Rel<LengthUnit>(input, LengthUnit.METER, StorageType.DENSE);
                dv.round();
                MathTester.tester(input, "round", dv, 0.001, new DoubleToDouble()
                {
                    @Override
                    public double function(final double d)
                    {
                        return Math.round(d);
                    }
                });
            }
            catch (ValueException ve)
            {
                fail("Caught unexpected ValueException: " + ve.toString());
            }
        }
    }

    /**
     * Test plus(DoubleVectorRel.Dense, DoubleVectorRel.Dense).
     */
    @Test
    public final void binaryplusOfRelDenseAndRelDenseTest()
    {
        try
        {
            double[] leftValue = data(3, 123.4);
            double[] rightValue = data(3, 234.5);
            DoubleVector.Rel<LengthUnit> left = new DoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<LengthUnit> right =
                    new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<?> result = left.plus(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI plus of contributing elements", left.getSI(i) + right.getSI(i),
                        result.getSI(i), 0.001);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test minus(DoubleVectorRel.Dense, DoubleVectorRel.Dense).
     */
    @Test
    public final void binaryminusOfRelDenseAndRelDenseTest()
    {
        try
        {
            double[] leftValue = data(3, 123.4);
            double[] rightValue = data(3, 234.5);
            DoubleVector.Rel<LengthUnit> left = new DoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<LengthUnit> right =
                    new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<?> result = left.minus(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI minus of contributing elements", left.getSI(i) - right.getSI(i),
                        result.getSI(i), 0.001);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test times(DoubleVectorRel.Dense, DoubleVectorRel.Dense).
     */
    @Test
    public final void binarytimesOfRelDenseAndRelDenseTest()
    {
        try
        {
            double[] leftValue = data(3, 123.4);
            double[] rightValue = data(3, 234.5);
            DoubleVector.Rel<LengthUnit> left = new DoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<LengthUnit> right =
                    new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<?> result = left.times(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI times of contributing elements", left.getSI(i) * right.getSI(i),
                        result.getSI(i), 0.001);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test plus(DoubleVectorRel.Dense, DoubleVectorRel.Sparse).
     */
    @Test
    public final void binaryplusOfRelDenseAndRelSparseTest()
    {
        try
        {
            double[] leftValue = data(3, 123.4);
            double[] rightValue = data(3, 234.5);
            DoubleVector.Rel<LengthUnit> left = new DoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<LengthUnit> right =
                    new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
            DoubleVector.Rel<?> result = left.plus(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI plus of contributing elements", left.getSI(i) + right.getSI(i),
                        result.getSI(i), 0.001);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test minus(DoubleVectorRel.Dense, DoubleVectorRel.Sparse).
     */
    @Test
    public final void binaryminusOfRelDenseAndRelSparseTest()
    {
        try
        {
            double[] leftValue = data(3, 123.4);
            double[] rightValue = data(3, 234.5);
            DoubleVector.Rel<LengthUnit> left = new DoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<LengthUnit> right =
                    new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
            DoubleVector.Rel<?> result = left.minus(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI minus of contributing elements", left.getSI(i) - right.getSI(i),
                        result.getSI(i), 0.001);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test times(DoubleVectorRel.Dense, DoubleVectorRel.Sparse).
     */
    @Test
    public final void binarytimesOfRelDenseAndRelSparseTest()
    {
        try
        {
            double[] leftValue = data(3, 123.4);
            double[] rightValue = data(3, 234.5);
            DoubleVector.Rel<LengthUnit> left = new DoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
            DoubleVector.Rel<LengthUnit> right =
                    new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
            DoubleVector.Rel<?> result = left.times(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be SI times of contributing elements", left.getSI(i) * right.getSI(i),
                        result.getSI(i), 0.001);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test that malformed or mismatching arrays throw a ValueException.
     */
    @Test
    public final void sizeCheckRelTest()
    {
        int junk = 0;
        try
        {
            // null array
            new DoubleVector.Rel<TemperatureUnit>((double[]) null, TemperatureUnit.DEGREE_FAHRENHEIT, StorageType.DENSE);
            fail("Preceding code should have thrown a ValueException");
        }
        catch (ValueException ve)
        {
            // Ignore (exception was expected)
            junk++;
        }
        assertTrue("The variable junk is only used to suppress annoying warnings of the code checker", junk > 0);
    }

    /**
     * Test the incrementBy method.
     */
    @Test
    public final void incrementByTest()
    {
        try
        {
            double[] leftValue = data(99, 123.4);
            double[] rightValue = data(99, 234.5);
            MutableDoubleVector.Rel<LengthUnit> left =
                    new MutableDoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
            MutableDoubleVector.Rel<LengthUnit> referenceLeft = left.copy();
            DoubleVector.Rel<LengthUnit> right =
                    new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
            left.incrementBy(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be sum of contributing elements", referenceLeft.getSI(i) + right.getSI(i),
                        left.getSI(i), 0.001);
            }
            left = new MutableDoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
            right = new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
            left.incrementBy(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be sum of contributing elements", referenceLeft.getSI(i) + right.getSI(i),
                        left.getSI(i), 0.001);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test the decrementBy method.
     */
    @Test
    public final void decrementByTest()
    {
        try
        {
            double[] leftValue = data(99, 123.4);
            double[] rightValue = data(99, 234.5);
            MutableDoubleVector.Rel<LengthUnit> left =
                    new MutableDoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
            MutableDoubleVector.Rel<LengthUnit> referenceLeft = left.copy();
            DoubleVector.Rel<LengthUnit> right =
                    new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
            left.decrementBy(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be difference of contributing elements",
                        referenceLeft.getSI(i) - right.getSI(i), left.getSI(i), 0.001);
            }
            left = new MutableDoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
            right = new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
            left.decrementBy(right);
            for (int i = 0; i < leftValue.length; i++)
            {
                assertEquals("value of element should be difference of contributing elements",
                        referenceLeft.getSI(i) - right.getSI(i), left.getSI(i), 0.001);
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test the multiplyBy method.
     */
    @Test
    public final void multiplyByTest()
    {
        try
        {
            for (boolean lastNanOrdering : new boolean[] { false, true })
            {
                double[] leftValue = data(99, 123.4);
                double[] rightValue = data(99, 234.5);
                leftValue[0] = Float.NaN;
                leftValue[1] = Float.NaN;
                rightValue[1] = Float.NaN;
                rightValue[2] = Float.NaN;
                if (lastNanOrdering)
                {
                    leftValue[98] = Float.NaN;
                    leftValue[97] = Float.NaN;
                    rightValue[97] = Float.NaN;
                    rightValue[96] = Float.NaN;
                }
                else
                {
                    rightValue[98] = Float.NaN;
                    rightValue[97] = Float.NaN;
                    leftValue[97] = Float.NaN;
                    leftValue[96] = Float.NaN;
                }
                MutableDoubleVector.Rel<LengthUnit> left =
                        new MutableDoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
                MutableDoubleVector.Rel<LengthUnit> referenceLeft = left.copy();
                DoubleVector.Rel<LengthUnit> right =
                        new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
                left.multiplyBy(right);
                for (int i = 0; i < leftValue.length; i++)
                {
                    assertEquals("value of element should be product of contributing elements",
                            referenceLeft.getSI(i) * right.getSI(i), left.getSI(i), 0.001);
                }
                left = new MutableDoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
                right = new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
                left.multiplyBy(right);
                for (int i = 0; i < leftValue.length; i++)
                {
                    assertEquals("value of element should be product of contributing elements",
                            referenceLeft.getSI(i) * right.getSI(i), left.getSI(i), 0.001);
                }
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test the divideBy method.
     */
    @Test
    public final void divideByTest()
    {
        try
        {
            for (boolean lastNanOrdering : new boolean[] { false, true })
            {
                double[] leftValue = data(99, 123.4);
                double[] rightValue = data(99, 234.5);
                leftValue[0] = Float.NaN;
                leftValue[1] = Float.NaN;
                rightValue[1] = Float.NaN;
                rightValue[2] = Float.NaN;
                if (lastNanOrdering)
                {
                    leftValue[98] = Float.NaN;
                    leftValue[97] = Float.NaN;
                    rightValue[97] = Float.NaN;
                    rightValue[96] = Float.NaN;
                }
                else
                {
                    rightValue[98] = Float.NaN;
                    rightValue[97] = Float.NaN;
                    leftValue[97] = Float.NaN;
                    leftValue[96] = Float.NaN;
                }
                MutableDoubleVector.Rel<LengthUnit> left =
                        new MutableDoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
                MutableDoubleVector.Rel<LengthUnit> referenceLeft = left.copy();
                DoubleVector.Rel<LengthUnit> right =
                        new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.DENSE);
                left.divideBy(right);
                for (int i = 0; i < leftValue.length; i++)
                {
                    double expect = referenceLeft.getSI(i) / right.getSI(i);
                    double got = left.getSI(i);
                    if (Double.isNaN(expect))
                    {
                        assertTrue("value of element should be NaN", Double.isNaN(got));
                    }
                    else if (Double.isInfinite(expect))
                    {
                        assertTrue("value of element should be infinite", Double.isInfinite(got));
                    }
                    else
                    {
                        assertEquals("value of element should be ratio of contributing elements", expect, got, 0.001);
                    }
                }
                left = new MutableDoubleVector.Rel<LengthUnit>(leftValue, LengthUnit.MILE, StorageType.DENSE);
                right = new DoubleVector.Rel<LengthUnit>(rightValue, LengthUnit.MILE, StorageType.SPARSE);
                left.divideBy(right);
                for (int i = 0; i < leftValue.length; i++)
                {
                    double expect = referenceLeft.getSI(i) / right.getSI(i);
                    double got = left.getSI(i);
                    if (Double.isNaN(expect))
                    {
                        assertTrue("value of element should be NaN", Double.isNaN(got));
                    }
                    else if (Double.isInfinite(expect))
                    {
                        assertTrue("value of element should be infinite", Double.isInfinite(got));
                    }
                    else
                    {
                        assertEquals("value of element should be ratio of contributing elements", expect, got, 0.001);
                    }
                }
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /**
     * Test the incrementBy, decrementBy, multiplyBy and divideBy methods that take a scalar as second argument.
     */
    @Test
    public void modifyByScalar()
    {
        try
        {
            TemperatureUnit tempUnit = TemperatureUnit.DEGREE_CELSIUS;
            double[] value = data(99, 38.0);
            double modifier = 8.76d;
            MutableDoubleVector.Rel<TemperatureUnit> testVector =
                    new MutableDoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            testVector.incrementBy(modifier);
            for (int index = 0; index < value.length; index++)
            {
                assertEquals("incremented value should match", value[index] + modifier, testVector.getInUnit(index), 0.01);
            }
            testVector = new MutableDoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            testVector.incrementBy(Double.NaN);
            for (int index = 0; index < value.length; index++)
            {
                assertTrue("incremented value should be NaN", Double.isNaN(testVector.getInUnit(index)));
            }
            testVector = new MutableDoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            testVector.decrementBy(modifier);
            for (int index = 0; index < value.length; index++)
            {
                assertEquals("decremented value should match", value[index] - modifier, testVector.getInUnit(index), 0.01);
            }
            testVector = new MutableDoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            testVector.decrementBy(Double.NaN);
            for (int index = 0; index < value.length; index++)
            {
                assertTrue("decremented value should be NaN", Double.isNaN(testVector.getInUnit(index)));
            }
            testVector = new MutableDoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            testVector.multiplyBy(modifier);
            for (int index = 0; index < value.length; index++)
            {
                assertEquals("multiplied value should match", value[index] * modifier, testVector.getInUnit(index), 0.01);
            }
            testVector = new MutableDoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            testVector.multiplyBy(Double.NaN);
            for (int index = 0; index < value.length; index++)
            {
                assertTrue("multiplied value should be NaN", Double.isNaN(testVector.getInUnit(index)));
            }
            testVector = new MutableDoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            testVector.divideBy(modifier);
            for (int index = 0; index < value.length; index++)
            {
                assertEquals("divided value should match", value[index] / modifier, testVector.getInUnit(index), 0.01);
            }
            testVector = new MutableDoubleVector.Rel<TemperatureUnit>(value, tempUnit, StorageType.DENSE);
            testVector.divideBy(Double.NaN);
            for (int index = 0; index < value.length; index++)
            {
                assertTrue("divided value should be NaN", Double.isNaN(testVector.getInUnit(index)));
            }
        }
        catch (ValueException ve)
        {
            fail("Caught unexpected ValueException: " + ve.toString());
        }
    }

    /** */
    interface DoubleToDouble
    {
        /**
         * @param d double; value
         * @return double value
         */
        double function(double d);
    }

    /** */
    abstract static class MathTester
    {
        /**
         * Test a math function.
         * @param inputValues double[]; unprocessed value
         * @param operation String; description of method that is being tested
         * @param actualResult DoubleVector&lt;?&gt;; the actual result of the operation
         * @param precision double; expected accuracy
         * @param function DoubleToDouble; encapsulated function that converts one inputValue to an outputValue
         */
        public static void tester(final double[] inputValues, final String operation,
                final AbstractDoubleVector<?, ?> actualResult, final double precision, final DoubleToDouble function)
        {
            for (int i = 0; i < inputValues.length; i++)
            {
                double expectedResult = function.function(inputValues[i]);
                double got = 0;
                try
                {
                    got = actualResult.getSI(i);
                }
                catch (ValueException ve)
                {
                    fail("Caught unexpected exception: " + ve.toString());
                }
                String description = String.format("%s(%f->%f should be equal to %f with precision %f", operation,
                        inputValues[i], expectedResult, got, precision);
                // System.out.println(description);
                assertEquals(description, expectedResult, got, precision);
            }
        }

    }

}
