package org.djunits4.value.vdouble.scalar;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import org.djunits4.unit.DurationUnit;
import org.djunits4.unit.Unit;
import org.djunits4.value.CLASSNAMES;
import org.djunits4.value.Scalar;
import org.junit.Test;

/**
 * Test the DoubleScalar and FloatScalar classes for the valueOf and stringOf methods.
 * <p>
 * This file was generated by the djunits value test classes generator, 26 jun, 2015
 * <p>
 * Copyright (c) 2015-2019 Delft University of Technology, PO Box 5, 2600 AA, Delft, the Netherlands. All rights reserved. <br>
 * BSD-style license. See <a href="https://djunits.org/docs/license.html">DJUNITS License</a>.
 * <p>
 * @author <a href="https://www.tudelft.nl/averbraeck">Alexander Verbraeck</a>
 * @author <a href="https://www.tudelft.nl/staff/p.knoppers/">Peter Knoppers</a>
 */
public class ValueOfStringOfTest
{
    /**
     * Test the Duration class for the valueOf and stringOf methods.
     */
    @Test
    public final void durationValueOfTest()
    {
        Duration duration = new Duration(10.0, DurationUnit.MINUTE);
        assertEquals("10.0 min", Scalar.stringOf(duration));
        assertEquals(duration, Duration.valueOf(Scalar.stringOf(duration)));
    }

    /**
     * Test the DoubleScalar and FloatScalar classes for the valueOf and stringOf methods.
     */
    @Test
    public final void valueOfDoubleTest()
    {
        for (String className : CLASSNAMES.ALL_NODIM)
        {
            // get the class
            Class<?> scalarClass = null;
            String classPath = "org.djunits4.value.vdouble.scalar." + className;
            try
            {
                scalarClass = Class.forName(classPath);
            }
            catch (ClassNotFoundException exception)
            {
                fail("Class not found for Scalar class " + classPath);
            }

            // create a value so we can obtain info
            Method createSIMethod = null;
            try
            {
                createSIMethod = scalarClass.getMethod("createSI", double.class);
            }
            catch (NoSuchMethodException | SecurityException exception)
            {
                fail("Method createSI not found for Scalar class " + classPath);
            }
            Scalar<?> scalarSI = null;
            try
            {
                scalarSI = (Scalar<?>) createSIMethod.invoke(scalarClass, new Double(10.0));
            }
            catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException exception)
            {
                fail("Method createSI failed for Scalar class " + classPath);
            }

            // get the unit
            Unit<?> unitSI = scalarSI.getUnit();

            // get the constructor
            Constructor<?> constructScalar = null;
            try
            {
                constructScalar = scalarClass.getConstructor(double.class, unitSI.getClass());
            }
            catch (NoSuchMethodException | SecurityException exception)
            {
                fail("Constructor for unit " + unitSI.getClass().getName() + " not found for Scalar class " + classPath);
            }

            // loop over all the unit types
            for (Unit<?> unit : unitSI.getUnitBase().getUnitsById().values())
            {
                Scalar<?> scalarUnit = null;
                try
                {
                    scalarUnit = (Scalar<?>) constructScalar.newInstance(new Double(1.0), unit);
                }
                catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException
                        | InstantiationException exception)
                {
                    fail("Construct with unit " + unit.getClass().getName() + " failed for Scalar class " + classPath);
                }

                // see if the 'valueOf' and the 'StringOf' match
                String scalarString = null;
                String unitRep = null;
                try
                {
                    unitRep = unit.getDefaultTextualAbbreviation();
                }
                catch (Exception e)
                {
                    fail("getDefaultTextualRepresentation for unit " + unit.getClass().getName() + " failed for Scalar class "
                            + classPath);
                }
                try
                {
                    scalarString = Scalar.textualStringOfDefaultLocale(scalarUnit);
                }
                catch (Exception e)
                {
                    fail("textualStringOfDefaultLocale for scalar " + scalarUnit + " failed for Scalar class " + classPath);
                }
                assertEquals("1.0" + " " + unitRep, scalarString);

                // find the valueOf method
                Method valueOfMethod = null;
                try
                {
                    valueOfMethod = scalarClass.getMethod("valueOf", String.class);
                }
                catch (NoSuchMethodException | SecurityException exception)
                {
                    fail("Method 'valueOf' not found for Scalar class " + classPath);
                }
                Scalar<?> value = null;
                try
                {
                    System.out.println("Calling " + scalarClass.getName() + ".valueOf(" + scalarString + ")");
                    value = (Scalar<?>) valueOfMethod.invoke(scalarClass, scalarString);
                }
                catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException exception)
                {
                    if (exception.getCause() != null)
                    {
                        exception.getCause().printStackTrace();
                    }
                    else
                    {
                        exception.printStackTrace();
                    }
                    fail("Method 'valueOf' failed for Scalar class " + classPath);
                }
                assertEquals(value.toString(), scalarUnit.toString());

                // find the of method
                Method ofMethod = null;
                try
                {
                    ofMethod = scalarClass.getMethod("of", double.class, String.class);
                }
                catch (NoSuchMethodException | SecurityException exception)
                {
                    fail("Method 'of' not found for Scalar class " + classPath);
                }
                Scalar<?> ofValue = null;
                try
                {
                    System.out.println("Calling " + scalarClass.getName() + ".of(" + scalarString + ")");
                    ofValue = (Scalar<?>) ofMethod.invoke(scalarClass, 1.0, unit.getDefaultTextualAbbreviation());
                }
                catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException exception)
                {
                    if (exception.getCause() != null)
                    {
                        exception.getCause().printStackTrace();
                    }
                    else
                    {
                        exception.printStackTrace();
                    }
                    fail("Method 'of' failed for Scalar class " + classPath);
                }
                assertEquals(ofValue.toString(), scalarUnit.toString());
            }
        }
    }
}
